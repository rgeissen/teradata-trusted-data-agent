2025-08-12 18:20:55,351 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
No reason provided.

--- History ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a helpful assistant that organizes lists into JSON format.

USER PROMPT:
You are a helpful assistant that organizes lists of technical tools for a **Teradata database system** into logical categories for a user interface. Your response MUST be a single, valid JSON object. The keys should be the category names, and the values should be an array of tool names belonging to that category.

--- Tool List ---
- dba_databaseSpace: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

- dba_resusageSummary: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


- dba_tableSpace: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

- dba_tableSqlList: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

- dba_tableUsageImpact: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


- dba_userSqlList: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

- sec_rolePermissions: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- sec_userDbPermissions: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- sec_userRoles: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_columnSummary: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_distinctCategories: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_missingValues: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_negativeValues: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_rowsWithMissingValues: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_standardDeviation: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_univariateStatistics: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- fs_createDataset: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

- fs_featureStoreContent: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- fs_getAvailableDatasets: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- fs_getAvailableEntities: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- fs_getDataDomains: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- fs_getFeatureDataModel: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- fs_getFeatures: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- fs_isFeatureStorePresent: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

- tmpl_nameOfTool: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- rag_executeWorkflow: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

- rag_executeWorkflow_ivsm: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

- base_columnDescription: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

- base_readQuery: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableAffinity: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableDDL: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tablePreview: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableUsage: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

- cust_activeUsers: Fetch currently active database users
- cust_td_serverInfo: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- get_cube_cust_cube_db_space_metrics: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- dba_databaseVersion:  Get Teradata database version information.
- dba_flowControl: Get the Teradata flow control metrics for a specified date range.
- dba_featureUsage: Get the user feature usage metrics for a specified date range.
- dba_userDelay: Get the Teradata user delay metrics for a specified date range.
- dba_sessionInfo: Get the Teradata session information for user.
- base_tableList: Lists all tables in a database.
- base_databaseList: Lists all databases in the Teradata System.
- fs_setFeatureStoreConfig: Set or update the feature store configuration (database and data domain).
- fs_getFeatureStoreConfig: Display the current feature store configuration (database and data domain).
- viz_createChart: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
- util_getCurrentDate: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

2025-08-12 18:20:55,352 - --- RESPONSE ---
```json
{
  "Database Space Tools": [
    "dba_databaseSpace",
    "dba_tableSpace",
    "get_cube_cust_cube_db_space_metrics"
  ],
  "Resource Usage Tools": [
    "dba_resusageSummary",
    "dba_tableUsageImpact",
    "dba_userSqlList"
  ],
  "SQL Query Tools": [
    "dba_tableSqlList",
    "base_readQuery",
    "base_tablePreview",
    "base_tableUsage"
  ],
  "Table Information Tools": [
    "base_columnDescription",
    "base_tableAffinity",
    "base_tableDDL",
    "qlty_columnSummary",
    "qlty_distinctCategories",
    "qlty_missingValues",
    "qlty_negativeValues",
    "qlty_rowsWithMissingValues",
    "qlty_standardDeviation",
    "qlty_univariateStatistics"
  ],
  "Security Tools": [
    "sec_rolePermissions",
    "sec_userDbPermissions",
    "sec_userRoles"
  ],
  "Feature Store Tools": [
    "fs_createDataset",
    "fs_featureStoreContent",
    "fs_getAvailableDatasets",
    "fs_getAvailableEntities",
    "fs_getDataDomains",
    "fs_getFeatureDataModel",
    "fs_getFeatures",
    "fs_isFeatureStorePresent",
    "fs_setFeatureStoreConfig",
    "fs_getFeatureStoreConfig"
  ],
  "RAG Workflow Tools": [
    "rag_executeWorkflow",
    "rag_executeWorkflow_ivsm"
  ],
  "Utility Tools": [
    "util_getCurrentDate",
    "cust_activeUsers",
    "cust_td_serverInfo",
    "dba_databaseVersion",
    "dba_flowControl",
    "dba_featureUsage",
    "dba_userDelay",
    "dba_sessionInfo",
    "base_tableList",
    "base_databaseList",
    "viz_createChart"
  ]
}
```
--------------------------------------------------

2025-08-12 18:20:56,184 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
No reason provided.

--- History ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a helpful assistant that organizes lists into JSON format.

USER PROMPT:
You are a JSON formatting expert. Your task is to categorize the following list of Teradata system prompts into a single JSON object.

**CRITICAL RULES:**
1. Your entire response MUST be a single, raw JSON object.
2. DO NOT include ```{{json}} markdown wrappers, conversational text, or any explanations.
3. The JSON keys MUST be the category names.
4. The JSON values MUST be an array of the prompt names.

--- Prompt List to Categorize ---
- cust_promptExample: my prompt description
- test_evsTools: Test all the evs MCP tools.
- test_secTools: Test all the sec MCP tools.
- test_dbaTools: Test all the DBA MCP tools.
- dba_tableArchive: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- dba_databaseLineage: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- dba_tableDropImpact: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- dba_databaseHealthAssessment: You are a Teradata DBA who is an expert in assessing the health of a database.
- dba_userActivityAnalysis: Analyze Teradata user activity patterns for the past 7 days
- dba_systemVoice: Analyze Teradata user activity patterns for the past 7 days
- test_ragTools: Test all the rag MCP tools.
- rag_guidelines: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- test_qltyTools: Test all the qlty MCP tools.
- qlty_databaseQuality: Database data quality assessment.
- test_fsTools: Test all the fs MCP tools.
- test_baseTools: Test all base tools in the Teradata MCP server.
- base_query: Help users interact with  Teradata databases effectively.
- base_tableBusinessDesc: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- base_databaseBusinessDesc: You are a Teradata DBA who is an expert in describing the business use of databases.

2025-08-12 18:20:56,184 - --- RESPONSE ---
{
  "test": [
    "test_evsTools",
    "test_secTools",
    "test_dbaTools",
    "test_ragTools",
    "test_qltyTools",
    "test_fsTools",
    "test_baseTools"
  ],
  "dba": [
    "dba_tableArchive",
    "dba_databaseLineage",
    "dba_tableDropImpact",
    "dba_databaseHealthAssessment",
    "dba_userActivityAnalysis",
    "dba_systemVoice"
  ],
  "base": [
    "base_query",
    "base_tableBusinessDesc",
    "base_databaseBusinessDesc"
  ],
  "qlty": [
    "qlty_databaseQuality"
  ],
  "rag": [
    "rag_guidelines"
  ],
  "cust": [
    "cust_promptExample"
  ]
}
--------------------------------------------------

2025-08-12 18:20:58,427 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
No reason provided.

--- History ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a helpful assistant that organizes lists into JSON format.

USER PROMPT:
You are a helpful assistant that organizes lists of technical tools for a **Teradata database system** into logical categories for a user interface. Your response MUST be a single, valid JSON object. The keys should be the category names, and the values should be an array of tool names belonging to that category.

--- Tool List ---
- dba_databaseSpace: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

- dba_resusageSummary: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


- dba_tableSpace: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

- dba_tableSqlList: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

- dba_tableUsageImpact: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


- dba_userSqlList: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

- sec_rolePermissions: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- sec_userDbPermissions: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- sec_userRoles: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_columnSummary: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_distinctCategories: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_missingValues: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_negativeValues: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_rowsWithMissingValues: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_standardDeviation: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- qlty_univariateStatistics: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- fs_createDataset: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

- fs_featureStoreContent: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- fs_getAvailableDatasets: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- fs_getAvailableEntities: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- fs_getDataDomains: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- fs_getFeatureDataModel: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- fs_getFeatures: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- fs_isFeatureStorePresent: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

- tmpl_nameOfTool: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

- rag_executeWorkflow: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

- rag_executeWorkflow_ivsm: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

- base_columnDescription: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

- base_readQuery: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableAffinity: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableDDL: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tablePreview: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

- base_tableUsage: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

- cust_activeUsers: Fetch currently active database users
- cust_td_serverInfo: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- get_cube_cust_cube_db_space_metrics: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- dba_databaseVersion:  Get Teradata database version information.
- dba_flowControl: Get the Teradata flow control metrics for a specified date range.
- dba_featureUsage: Get the user feature usage metrics for a specified date range.
- dba_userDelay: Get the Teradata user delay metrics for a specified date range.
- dba_sessionInfo: Get the Teradata session information for user.
- base_tableList: Lists all tables in a database.
- base_databaseList: Lists all databases in the Teradata System.
- fs_setFeatureStoreConfig: Set or update the feature store configuration (database and data domain).
- fs_getFeatureStoreConfig: Display the current feature store configuration (database and data domain).
- viz_createChart: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
- util_getCurrentDate: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

2025-08-12 18:20:58,427 - --- RESPONSE ---
```json
{
  "Database Management": [
    "dba_databaseSpace",
    "dba_resusageSummary",
    "dba_tableSpace",
    "dba_tableSqlList",
    "dba_tableUsageImpact",
    "dba_userSqlList",
    "dba_databaseVersion",
    "dba_flowControl",
    "dba_featureUsage",
    "dba_userDelay",
    "dba_sessionInfo",
    "base_tableList",
    "base_databaseList",
    "get_cube_cust_cube_db_space_metrics"
  ],
  "Security Management": [
    "sec_rolePermissions",
    "sec_userDbPermissions",
    "sec_userRoles"
  ],
  "Data Quality": [
    "qlty_columnSummary",
    "qlty_distinctCategories",
    "qlty_missingValues",
    "qlty_negativeValues",
    "qlty_rowsWithMissingValues",
    "qlty_standardDeviation",
    "qlty_univariateStatistics"
  ],
  "Feature Store": [
    "fs_createDataset",
    "fs_featureStoreContent",
    "fs_getAvailableDatasets",
    "fs_getAvailableEntities",
    "fs_getDataDomains",
    "fs_getFeatureDataModel",
    "fs_getFeatures",
    "fs_isFeatureStorePresent",
    "fs_setFeatureStoreConfig",
    "fs_getFeatureStoreConfig"
  ],
  "RAG Workflow": [
    "rag_executeWorkflow",
    "rag_executeWorkflow_ivsm"
  ],
  "Base SQL Operations": [
    "base_columnDescription",
    "base_readQuery",
    "base_tableAffinity",
    "base_tableDDL",
    "base_tablePreview",
    "base_tableUsage",
    "cust_activeUsers",
    "cust_td_serverInfo"
  ],
  "Utilities": [
    "util_getCurrentDate",
    "viz_createChart"
  ]
}
```
--------------------------------------------------

2025-08-12 18:20:59,245 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
No reason provided.

--- History ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a helpful assistant that organizes lists into JSON format.

USER PROMPT:
You are a JSON formatting expert. Your task is to categorize the following list of Teradata system prompts into a single JSON object.

**CRITICAL RULES:**
1. Your entire response MUST be a single, raw JSON object.
2. DO NOT include ```{{json}} markdown wrappers, conversational text, or any explanations.
3. The JSON keys MUST be the category names.
4. The JSON values MUST be an array of the prompt names.

--- Prompt List to Categorize ---
- cust_promptExample: my prompt description
- test_evsTools: Test all the evs MCP tools.
- test_secTools: Test all the sec MCP tools.
- test_dbaTools: Test all the DBA MCP tools.
- dba_tableArchive: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- dba_databaseLineage: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- dba_tableDropImpact: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- dba_databaseHealthAssessment: You are a Teradata DBA who is an expert in assessing the health of a database.
- dba_userActivityAnalysis: Analyze Teradata user activity patterns for the past 7 days
- dba_systemVoice: Analyze Teradata user activity patterns for the past 7 days
- test_ragTools: Test all the rag MCP tools.
- rag_guidelines: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- test_qltyTools: Test all the qlty MCP tools.
- qlty_databaseQuality: Database data quality assessment.
- test_fsTools: Test all the fs MCP tools.
- test_baseTools: Test all base tools in the Teradata MCP server.
- base_query: Help users interact with  Teradata databases effectively.
- base_tableBusinessDesc: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- base_databaseBusinessDesc: You are a Teradata DBA who is an expert in describing the business use of databases.

2025-08-12 18:20:59,245 - --- RESPONSE ---
{
  "test": [
    "test_evsTools",
    "test_secTools",
    "test_dbaTools",
    "test_ragTools",
    "test_qltyTools",
    "test_fsTools",
    "test_baseTools"
  ],
  "dba": [
    "dba_tableArchive",
    "dba_databaseLineage",
    "dba_tableDropImpact",
    "dba_databaseHealthAssessment",
    "dba_userActivityAnalysis",
    "dba_systemVoice"
  ],
  "base": [
    "base_query",
    "base_tableBusinessDesc",
    "base_databaseBusinessDesc"
  ],
  "qlty": [
    "qlty_databaseQuality"
  ],
  "rag": [
    "rag_guidelines"
  ],
  "cust": [
    "cust_promptExample"
  ]
}
--------------------------------------------------

2025-08-12 18:21:07,267 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Analyzing user query to determine the first action.

--- History ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
how many databases are on the system?

2025-08-12 18:21:07,267 - --- RESPONSE ---
```json
{
    "tool_name": "base_databaseList"
}
```
--------------------------------------------------

2025-08-12 18:21:08,123 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Deciding next action based on tool result.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
You are an assistant that has just received data from a tool call. Your task is to decide if this data is enough to answer the user's original question, or if another step is needed.

--- User's Original Question ---
'how many databases are on the system?'

--- Data from Last Tool Call ---
{"tool_name": "base_databaseList", "tool_output": {"status": "success", "metadata": {"tool_name": "base_databaseList", "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'\n", "columns": [{"name": "DatabaseName", "type": "str"}, {"name": "DBType", "type": "str"}, {"name": "CommentString", "type": "str"}], "row_count": 48}, "results": [{"DatabaseName": "TD_SYSXML", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "mldb", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "gs_tables_db", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "All", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TD_SYSGPL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_ANALYTICS_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_TDBCMgmt2", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "SYSJDBC", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TD_SYSFNLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SYSLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "DBC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "demo_user", "DBType": "User", "CommentString": "Logon ID for the end user to run demonstrations"}, {"DatabaseName": "tapidb", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "EXTUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SQLJ", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "Default", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDaaS_DB", "DBType": "DataBase", "CommentString": "As-A-Service : APIs DB "}, {"DatabaseName": "TDaaS_BAR", "DBType": "User", "CommentString": "As-A-Service : Backup and Restore "}, {"DatabaseName": "val", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "PUBLIC", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "dbcmngr", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDaaS_Monitor", "DBType": "User", "CommentString": "As-A-Service Monitor : Monitor Resource Usage "}, {"DatabaseName": "TDStats", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SYSBAR", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "External_AP", "DBType": "User", "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"}, {"DatabaseName": "TDQCD", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "tdwm", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "LockLogShredder", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "modelops", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "Sys_Calendar", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "GLOBAL_FUNCTIONS", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "system", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDMaps", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "SYSUDTLIB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "TDPUSER", "DBType": "User", "CommentString": "None"}, {"DatabaseName": "TDBCMgmt", "DBType": "DataBase", "CommentString": "POG/COG router management database"}, {"DatabaseName": "DemoNow_Monitor", "DBType": "User", "CommentString": "Support logon username for monitoring the platform"}, {"DatabaseName": "TDaaS_Support", "DBType": "User", "CommentString": "As-A-Service Support : Problem and Error Investigation "}, {"DatabaseName": "TD_SERVER_DB", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SYSSPATIAL", "DBType": "DataBase", "CommentString": "None"}, {"DatabaseName": "SystemFe", "DBType": "User", "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"}, {"DatabaseName": "TDaaS_TDBCMgmt1", "DBType": "User", "CommentString": "As-A-Service : POG/COG router management user"}, {"DatabaseName": "TDaaS_Maint", "DBType": "User", "CommentString": "As-A-Service Maintenance : Patching and Configuration "}, {"DatabaseName": "SysAdmin", "DBType": "User", "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"}, {"DatabaseName": "Crashdumps", "DBType": "User", "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"}, {"DatabaseName": "DEMO_Customer360", "DBType": "DataBase", "CommentString": "CREATED_BY: DEMO_Customer360_local"}, {"DatabaseName": "DEMO_Customer360_db", "DBType": "DataBase", "CommentString": "CREATED_BY: DEMO_Customer360_local"}, {"DatabaseName": "SYSUIF", "DBType": "DataBase", "CommentString": "None"}]}}

--- Your Decision Process ---
1.  **Analyze the Data:** Does the data above directly and completely answer the user's original question?
2.  **Choose Your Action:**
    -   If the data IS sufficient, your response **MUST** be only the exact string `SYSTEM_ACTION_COMPLETE`. Do not add any summary text.
    -   If the data is NOT sufficient and you need more information, call another tool or prompt by providing the appropriate JSON block.
    -   If the last tool call resulted in an error, you MUST attempt to recover.


2025-08-12 18:21:08,123 - --- RESPONSE ---
```json
{
    "action": "SYSTEM_ACTION_COMPLETE"
}
```
--------------------------------------------------

2025-08-12 18:21:09,494 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Generating final, insightful summary.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
You are an expert data analyst. Your task is to provide a final, comprehensive, and insightful summary for the user.

--- USER'S ORIGINAL QUESTION ---
'how many databases are on the system?'

--- RELEVANT DATA COLLECTED ---
```json
[
  {
    "status": "success",
    "metadata": {
      "tool_name": "base_databaseList",
      "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'\n",
      "columns": [
        {
          "name": "DatabaseName",
          "type": "str"
        },
        {
          "name": "DBType",
          "type": "str"
        },
        {
          "name": "CommentString",
          "type": "str"
        }
      ],
      "row_count": 48
    },
    "results": [
      {
        "DatabaseName": "TD_SYSXML",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "mldb",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "gs_tables_db",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "All",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TD_SYSGPL",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TD_ANALYTICS_DB",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDaaS_TDBCMgmt2",
        "DBType": "User",
        "CommentString": "As-A-Service : POG/COG router management user"
      },
      {
        "DatabaseName": "SYSJDBC",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TD_SYSFNLIB",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SYSLIB",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "DBC",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "demo_user",
        "DBType": "User",
        "CommentString": "Logon ID for the end user to run demonstrations"
      },
      {
        "DatabaseName": "tapidb",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "EXTUSER",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SQLJ",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "Default",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDaaS_DB",
        "DBType": "DataBase",
        "CommentString": "As-A-Service : APIs DB "
      },
      {
        "DatabaseName": "TDaaS_BAR",
        "DBType": "User",
        "CommentString": "As-A-Service : Backup and Restore "
      },
      {
        "DatabaseName": "val",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "PUBLIC",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "dbcmngr",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDaaS_Monitor",
        "DBType": "User",
        "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
      },
      {
        "DatabaseName": "TDStats",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SYSBAR",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "External_AP",
        "DBType": "User",
        "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
      },
      {
        "DatabaseName": "TDQCD",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "tdwm",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "LockLogShredder",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "modelops",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "Sys_Calendar",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "GLOBAL_FUNCTIONS",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "system",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDMaps",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SYSUDTLIB",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDPUSER",
        "DBType": "User",
        "CommentString": "None"
      },
      {
        "DatabaseName": "TDBCMgmt",
        "DBType": "DataBase",
        "CommentString": "POG/COG router management database"
      },
      {
        "DatabaseName": "DemoNow_Monitor",
        "DBType": "User",
        "CommentString": "Support logon username for monitoring the platform"
      },
      {
        "DatabaseName": "TDaaS_Support",
        "DBType": "User",
        "CommentString": "As-A-Service Support : Problem and Error Investigation "
      },
      {
        "DatabaseName": "TD_SERVER_DB",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SYSSPATIAL",
        "DBType": "DataBase",
        "CommentString": "None"
      },
      {
        "DatabaseName": "SystemFe",
        "DBType": "User",
        "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
      },
      {
        "DatabaseName": "TDaaS_TDBCMgmt1",
        "DBType": "User",
        "CommentString": "As-A-Service : POG/COG router management user"
      },
      {
        "DatabaseName": "TDaaS_Maint",
        "DBType": "User",
        "CommentString": "As-A-Service Maintenance : Patching and Configuration "
      },
      {
        "DatabaseName": "SysAdmin",
        "DBType": "User",
        "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
      },
      {
        "DatabaseName": "Crashdumps",
        "DBType": "User",
        "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
      },
      {
        "DatabaseName": "DEMO_Customer360",
        "DBType": "DataBase",
        "CommentString": "CREATED_BY: DEMO_Customer360_local"
      },
      {
        "DatabaseName": "DEMO_Customer360_db",
        "DBType": "DataBase",
        "CommentString": "CREATED_BY: DEMO_Customer360_local"
      },
      {
        "DatabaseName": "SYSUIF",
        "DBType": "DataBase",
        "CommentString": "None"
      }
    ]
  }
]
```

--- YOUR INSTRUCTIONS ---
1.  **First, critically evaluate if the `RELEVANT DATA COLLECTED` actually satisfies the `USER'S ORIGINAL QUESTION`.** Pay close attention to constraints like dates (e.g., 'today', 'this week').
2.  **If the data DOES NOT satisfy the request** (e.g., the user asked for 'today' but the data is for the whole week), you MUST state this limitation clearly in your answer. For example: 'I could not retrieve data specifically for today, but here are the insights from the last 7 days.'
3.  **Analyze the data deeply.** Find patterns, identify maximums/minimums, or summarize key trends relevant to the user's question.
4.  **Synthesize your findings** into a concise, natural language answer, including any limitations you identified.
5.  Your entire response **MUST** start with the prefix `FINAL_ANSWER:` and nothing else.

2025-08-12 18:21:09,495 - --- RESPONSE ---
```json
FINAL_ANSWER: I found 48 databases on the system. The details are displayed below. The databases are categorized into two types: 'DataBase' and 'User'. The 'DataBase' type includes system databases, user-created databases, and service-specific databases. The 'User' type includes user accounts and service accounts. Notably, several databases are designated for specific services such as 'As-A-Service', 'Monitoring', 'Backup and Restore', and 'Support'. Some databases have descriptive comments, while others do not. This comprehensive listing provides a clear overview of all databases currently active on the system.
```
--------------------------------------------------

2025-08-12 18:21:20,035 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Analyzing user query to determine the first action.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
what's in DEMO_Customer360_db?

2025-08-12 18:21:20,036 - --- RESPONSE ---
```json
{
    "tool_name": "base_tableList",
    "arguments": {
        "db_name": "DEMO_Customer360_db"
    }
}
```
--------------------------------------------------

2025-08-12 18:21:20,952 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Deciding next action based on tool result.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```
[user]: what's in DEMO_Customer360_db?
[assistant]: ```json
{
    "tool_name": "base_tableList",
    "arguments": {
        "db_name": "DEMO_Customer360_db"
    }
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
You are an assistant that has just received data from a tool call. Your task is to decide if this data is enough to answer the user's original question, or if another step is needed.

--- User's Original Question ---
'what's in DEMO_Customer360_db?'

--- Data from Last Tool Call ---
{"tool_name": "base_tableList", "tool_output": {"status": "success", "metadata": {"tool_name": "base_tableList", "sql": "select TableName from dbc.TablesV tv where UPPER(tv.DatabaseName) = UPPER(NULL) and tv.TableKind in ('T','V', 'O', 'Q');\n", "columns": [{"name": "TableName", "type": "str"}], "row_count": 4}, "results": [{"TableName": "Cookie"}, {"TableName": "CallCenter"}, {"TableName": "Online"}, {"TableName": "Equipment"}]}}

--- Your Decision Process ---
1.  **Analyze the Data:** Does the data above directly and completely answer the user's original question?
2.  **Choose Your Action:**
    -   If the data IS sufficient, your response **MUST** be only the exact string `SYSTEM_ACTION_COMPLETE`. Do not add any summary text.
    -   If the data is NOT sufficient and you need more information, call another tool or prompt by providing the appropriate JSON block.
    -   If the last tool call resulted in an error, you MUST attempt to recover.


2025-08-12 18:21:20,952 - --- RESPONSE ---
```json
{
    "action": "SYSTEM_ACTION_COMPLETE",
    "response": "The DEMO_Customer360_db contains the following tables: Cookie, CallCenter, Online, and Equipment."
}
```
--------------------------------------------------

2025-08-12 18:21:21,713 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Generating final, insightful summary.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```
[user]: what's in DEMO_Customer360_db?
[assistant]: ```json
{
    "tool_name": "base_tableList",
    "arguments": {
        "db_name": "DEMO_Customer360_db"
    }
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
You are an expert data analyst. Your task is to provide a final, comprehensive, and insightful summary for the user.

--- USER'S ORIGINAL QUESTION ---
'what's in DEMO_Customer360_db?'

--- RELEVANT DATA COLLECTED ---
```json
[
  {
    "status": "success",
    "metadata": {
      "tool_name": "base_tableList",
      "sql": "select TableName from dbc.TablesV tv where UPPER(tv.DatabaseName) = UPPER(NULL) and tv.TableKind in ('T','V', 'O', 'Q');\n",
      "columns": [
        {
          "name": "TableName",
          "type": "str"
        }
      ],
      "row_count": 4
    },
    "results": [
      {
        "TableName": "Cookie"
      },
      {
        "TableName": "CallCenter"
      },
      {
        "TableName": "Online"
      },
      {
        "TableName": "Equipment"
      }
    ]
  }
]
```

--- YOUR INSTRUCTIONS ---
1.  **First, critically evaluate if the `RELEVANT DATA COLLECTED` actually satisfies the `USER'S ORIGINAL QUESTION`.** Pay close attention to constraints like dates (e.g., 'today', 'this week').
2.  **If the data DOES NOT satisfy the request** (e.g., the user asked for 'today' but the data is for the whole week), you MUST state this limitation clearly in your answer. For example: 'I could not retrieve data specifically for today, but here are the insights from the last 7 days.'
3.  **Analyze the data deeply.** Find patterns, identify maximums/minimums, or summarize key trends relevant to the user's question.
4.  **Synthesize your findings** into a concise, natural language answer, including any limitations you identified.
5.  Your entire response **MUST** start with the prefix `FINAL_ANSWER:` and nothing else.

2025-08-12 18:21:21,713 - --- RESPONSE ---
```json
FINAL_ANSWER: The DEMO_Customer360_db contains four tables: 'Cookie', 'CallCenter', 'Online', and 'Equipment'. This information provides a high-level overview of the database structure, but does not offer details about the content or usage of these tables. Further analysis would be required to understand the specific data each table holds and how they interrelate within the database.
```
--------------------------------------------------

2025-08-12 18:21:32,947 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Analyzing user query to determine the first action.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```
[user]: what's in DEMO_Customer360_db?
[assistant]: ```json
{
    "tool_name": "base_tableList",
    "arguments": {
        "db_name": "DEMO_Customer360_db"
    }
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
give me a business specification for Equipment

2025-08-12 18:21:32,948 - --- RESPONSE ---
```json
{
    "tool_name": "base_tableBusinessDesc",
    "arguments": {
        "db_name": "DEMO_Customer360_db",
        "obj_name": "Equipment"
    }
}
```
--------------------------------------------------

2025-08-12 18:21:34,431 - --- FULL CONTEXT (Session: bb6a524c-81d2-43f1-b300-7393111d88be) ---
--- REASON FOR CALL ---
Executing workflow step.

--- History ---
[user]: how many databases are on the system?
[assistant]: ```json
{
    "tool_name": "base_databaseList"
}
```
[user]: what's in DEMO_Customer360_db?
[assistant]: ```json
{
    "tool_name": "base_tableList",
    "arguments": {
        "db_name": "DEMO_Customer360_db"
    }
}
```
[user]: give me a business specification for Equipment
[assistant]: ```json
{
    "tool_name": "base_tableBusinessDesc",
    "arguments": {
        "db_name": "DEMO_Customer360_db",
        "obj_name": "Equipment"
    }
}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) and providing all necessary arguments. You must operate in a step-by-step manner.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   Review `--- Available Prompts ---` and `--- Available Tools ---`. Choose the SINGLE best one to make progress.
    -   If the capability is a prompt, you **MUST** use the key `"prompt_name"`.
    -   If the capability is a tool, you **MUST** use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{{"prompt_name": "some_prompt", "arguments": {{"arg": "value"}}}}`
    -   Example (Tool): `{{"tool_name": "some_tool", "arguments": {{"arg": "value"}}}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Do not re-format raw data (like lists of tables) into markdown; the user interface will display it. Simply introduce the data in your summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you **MUST** use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you **MUST** use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.

# Capabilities
--- Available Tools ---
- `dba_databaseSpace`: 
Get database space if database name is provided, otherwise get all databases space allocations.

Arguments:
  db_name - database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `dba_resusageSummary`: 
Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

Arguments:
  dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
  user_name - user name
  date - Date to analyze, formatted as `YYYY-MM-DD`
  dayOfWeek - day of the week to analyze
  hourOfDay - hour of day to analyze


  - Arguments:
    - `dimensions` (any, optional): No description.
    - `user_name` (any, optional): No description.
    - `date` (any, optional): No description.
    - `dayOfWeek` (any, optional): No description.
    - `hourOfDay` (any, optional): No description.
- `dba_tableSpace`: 
Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

Arguments:
  db_name - database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (any, optional): No description.
- `dba_tableSqlList`: 
Get a list of SQL run against a table in the last number of days.

Arguments:
  table_name - table name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `no_days` (any, optional): No description.
- `dba_tableUsageImpact`: 
Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.

Arguments:
  db_name - database name to analyze
  user_name - user name to analyze


  - Arguments:
    - `db_name` (any, optional): No description.
    - `user_name` (any, optional): No description.
- `dba_userSqlList`: 
Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

Arguments:
  user_name - user name
  no_days - number of days

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (any, optional): No description.
    - `no_days` (any, optional): No description.
- `sec_rolePermissions`: 
Get permissions for a role.

Arguments:
  role_name - role name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `role_name` (string, optional): No description.
- `sec_userDbPermissions`: 
Get permissions for a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `sec_userRoles`: 
Get roles assigned to a user.

Arguments:
  user_name - user name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `user_name` (string, optional): No description.
- `qlty_columnSummary`: 
Get the column summary statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_distinctCategories`: 
Get the destinct categories from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_missingValues`: 
Get the column names that having missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_negativeValues`: 
Get the column names that having negative values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
- `qlty_rowsWithMissingValues`: 
Get the rows with missing values in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_standardDeviation`: 
Get the standard deviation from column in a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `qlty_univariateStatistics`: 
Get the univariate statistics for a table.

Arguments:
  db_name - name of the database
  table_name - table name to analyze
  col_name - column name to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
    - `table_name` (string, optional): No description.
    - `col_name` (string, optional): No description.
- `fs_createDataset`: 
Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.
Args:
    entity_name (str): Entity for which the dataset will be created. Available entities are reported in the feature catalog.
    feature_selection (list[str]): List of features to include in the dataset. Available features are reported in the feature catalog.
    dataset_name (str): The name of the dataset to create.
    target_database (str): The database where the dataset will be created.

  - Arguments:
    - `entity_name` (string, optional): No description.
    - `feature_selection` (array, optional): No description.
    - `dataset_name` (string, optional): No description.
    - `target_database` (string, optional): No description.
- `fs_featureStoreContent`: 
Returns a summary of the feature store content. Use this to understand what data is available in the feature store.

- `fs_getAvailableDatasets`: 
List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .

- `fs_getAvailableEntities`: 
List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getDataDomains`: 
List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.

- `fs_getFeatureDataModel`: 
Returns the feature store data model, including the feature catalog, process catalog, and dataset catalog.

- `fs_getFeatures`: 
List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .

- `fs_isFeatureStorePresent`: Check if a feature store is present in the specified database.

Args:
    db_name (str): The name of the database to check for the feature store.

  - Arguments:
    - `db_name` (string, optional): No description.
- `tmpl_nameOfTool`: 
<description of what the tool is for>

Arguments:
  arguments - arguments to analyze

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `argument` (any, optional): No description.
- `rag_executeWorkflow`: 
Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided)

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `rag_executeWorkflow_ivsm`: 
Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.

Arguments:
  question - user question to process
  k - number of top-k results to return (optional, uses config default if not provided

Returns:
  Returns the top-k most relevant chunks with metadata for context-grounded answer generation.

  - Arguments:
    - `question` (string, optional): No description.
    - `k` (integer, optional): No description.
- `base_columnDescription`: 
Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  obj_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_readQuery`: 
Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  sql    - SQL text, with optional bind-parameter placeholders

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `sql` (string, optional): No description.
- `base_tableAffinity`: 
Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  object_name - table or view name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `obj_name` (string, optional): No description.
- `base_tableDDL`: 
Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name
  table_name - table name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (string, optional): No description.
    - `table_name` (string, optional): No description.
- `base_tablePreview`: 
This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  table_name - table or view name
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `table_name` (string, optional): No description.
    - `db_name` (any, optional): No description.
- `base_tableUsage`: 
Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

Arguments:
  db_name - Database name

Returns:
  ResponseType: formatted response with query results + metadata

  - Arguments:
    - `db_name` (any, optional): No description.
- `cust_activeUsers`: Fetch currently active database users
- `cust_td_serverInfo`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, optional): No description.
- `get_cube_cust_cube_db_space_metrics`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, optional): No description.
    - `measures` (string, optional): No description.
- `dba_databaseVersion`:  Get Teradata database version information.
- `dba_flowControl`: Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_featureUsage`: Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_userDelay`: Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, optional): No description.
    - `end_date` (string, optional): No description.
- `dba_sessionInfo`: Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, optional): No description.
- `base_tableList`: Lists all tables in a database.
  - Arguments:
    - `db_name` (string, optional): No description.
- `base_databaseList`: Lists all databases in the Teradata System.
- `fs_setFeatureStoreConfig`: Set or update the feature store configuration (database and data domain).
  - Arguments:
    - `data_domain` (any, optional): No description.
    - `db_name` (any, optional): No description.
    - `entity` (any, optional): No description.
- `fs_getFeatureStoreConfig`: Display the current feature store configuration (database and data domain).
- `viz_createChart`: Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate`: Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_evsTools`: Test all the evs MCP tools.
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the rag MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_fsTools`: Test all the fs MCP tools.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.


USER PROMPT:
You are an expert assistant executing one specific step of a larger plan.

--- CURRENT TASK: Phase 2 - Describe the table ---
- Describe the table in a business context. The description should be a single string. 
- The description should include the following: 
    - The purpose of the table
    - The purpose of the columns in the table

## Communication guidelines:
      - Be concise but informative in your explanations
      - Clearly indicate which phase the process is currently in
      - summarize the outcome of the phase before moving to the next phase

## Final output guidelines:
      - return in markdown
      - Example:
      ***Table Name:*** `table_name`

      ***Database Name:*** `database_name`

      ***Description:*** `table_description`

         - ***Column1:*** `column1_descriptions`
         - ***Column2:*** `column2_descriptions`
         - ***Column3:*** `column3_descriptions`

--- CONTEXT FROM PREVIOUS STEP ---
The last action returned the following data. Use this information to complete your current task.
```json
{"tool_name": "base_tableDDL", "tool_output": {"status": "success", "metadata": {"tool_name": "base_tableDDL", "database": "DEMO_Customer360_db", "table": "Equipment"}, "results": [{"Request Text": "CREATE MULTISET TABLE DEMO_Customer360_db.Equipment ,FALLBACK ,\r     NO BEFORE JOURNAL,\r     NO AFTER JOURNAL,\r     CHECKSUM = DEFAULT,\r     DEFAULT MERGEBLOCKRATIO,\r     MAP = TD_MAP1\r     (\r      CUST_ID SMALLINT,\r      GENDER VARCHAR(1) CHARACTER SET LATIN CASESPECIFIC,\r      FIRSTNAME VARCHAR(11) CHARACTER SET LATIN CASESPECIFIC,\r      LASTNAME VARCHAR(9) CHARACTER SET LATIN CASESPECIFIC,\r      ADDRESS VARCHAR(25) CHARACTER SET LATIN CASESPECIFIC,\r      STATE VARCHAR(2) CHARACTER SET LATIN CASESPECIFIC,\r      CITY VARCHAR(16) CHARACTER SET LATIN CASESPECIFIC,\r      ZIP INTEGER,\r      EQUIP_LTV SMALLINT)\rNO PRIMARY INDEX ;"}]}}
```

--- YOUR INSTRUCTIONS ---
1.  **Analyze the provided data** and the task description above.
2.  **Fulfill the task.** If the task is to describe or analyze something, provide that analysis directly.
3.  Your response **MUST** start with `FINAL_ANSWER:`.

2025-08-12 18:21:34,431 - --- RESPONSE ---
```markdown
FINAL_ANSWER: Phase 2 - Describe the table

***Table Name:*** `Equipment`

***Database Name:*** `DEMO_Customer360_db`

***Description:*** The `Equipment` table is used to store information about customer equipment, including customer-specific details and equipment lifetime value (LTV).

    - ***CUST_ID:*** `Unique identifier for the customer`
    - ***GENDER:*** `Gender of the customer`
    - ***FIRSTNAME:*** `First name of the customer`
    - ***LASTNAME:*** `Last name of the customer`
    - ***ADDRESS:*** `Street address of the customer`
    - ***STATE:*** `State where the customer resides`
    - ***CITY:*** `City where the customer resides`
    - ***ZIP:*** `ZIP code of the customer's address`
    - ***EQUIP_LTV:*** `Lifetime value of the customer's equipment`
```
--------------------------------------------------


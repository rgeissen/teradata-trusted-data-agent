2025-08-03 18:23:27,705 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: dc9f4288-4fa1-401d-8bb6-6ce5a6c31327) ---
[user]: what is the quality of database DEMO_Customer360_db?

2025-08-03 18:23:27,706 - --- RESPONSE ---
To assess the quality of the database DEMO_Customer360_db, we'll need to use the `qlty_databaseQuality` prompt. This prompt is specifically designed to provide a comprehensive assessment of database quality. Let's use it for the DEMO_Customer360_db database.

{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
--------------------------------------------------

2025-08-03 18:23:31,786 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: dc9f4288-4fa1-401d-8bb6-6ce5a6c31327) ---
[user]: what is the quality of database DEMO_Customer360_db?
[assistant]: To assess the quality of the database DEMO_Customer360_db, we'll need to use the `qlty_databaseQuality` prompt. This prompt is specifically designed to provide a comprehensive assessment of database quality. Let's use it for the DEMO_Customer360_db database.

{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
[user]: You are a data analyst responsible for the final step of a complex task.

--- CONTEXT ---
A multi-step plan was executed to gather data and answer a user's request. All the data has been collected and is provided below.

--- COLLECTED DATA ---
[]

--- YOUR TASK ---
Synthesize the information in the COLLECTED DATA to generate a final, comprehensive answer for the user's original request: 'what is the quality of database DEMO_Customer360_db?'.
Your response MUST start with `FINAL_ANSWER:` and strictly follow the presentation and communication guidelines from the final phase of the ORIGINAL PLAN.

**CRITICAL INSTRUCTIONS:**
1. Your summary MUST be based *only* on the data provided and the presentation guidelines from the ORIGINAL PLAN.
2. **DO NOT** re-execute any tools or mention the previous phases (e.g., 'Phase 1'). Focus only on the final presentation.
3. If you see results with a 'skipped' status in the data, you MUST mention this in your summary.
4. Do not describe your internal thought process or mention that you were given JSON.

2025-08-03 18:23:31,786 - --- RESPONSE ---
I apologize, but I don't have any collected data to synthesize for a final answer regarding the quality of the database DEMO_Customer360_db. It appears that the multi-step plan to gather this information was not executed or did not return any results. Without any data to analyze, I cannot provide a comprehensive assessment of the database quality.

To properly answer the question "what is the quality of database DEMO_Customer360_db?", we would need to collect and analyze various metrics such as data completeness, consistency, accuracy, and timeliness. This would typically involve examining table structures, column statistics, data distributions, and potentially running quality checks on the data within the database.

Since no data is available, I recommend re-initiating the data collection process to gather the necessary information about the DEMO_Customer360_db database. Once we have the required data, we can then provide a thorough analysis of its quality.
--------------------------------------------------


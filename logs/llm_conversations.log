2025-08-04 09:27:45,818 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: ea2dd588-0531-4536-bcaa-8e3267fc962a) ---
[user]: what is the quality of database DEMO_Customer360_db?

2025-08-04 09:27:45,818 - --- RESPONSE ---
```json
{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
```
--------------------------------------------------

2025-08-04 09:27:57,814 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: ea2dd588-0531-4536-bcaa-8e3267fc962a) ---
[user]: what is the quality of database DEMO_Customer360_db?
[assistant]: ```json
{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
```
[user]: You are a data analyst. Your task is to provide a natural language business description based on a table's DDL.

**CRITICAL INSTRUCTIONS:**
1. Your entire response MUST be plain text.
2. DO NOT generate JSON, tool calls, or any code.
3. Describe the likely business purpose of the table and each column.

--- DDL to Analyze ---
```sql
CREATE MULTISET TABLE DEMO_Customer360_db.CallCenter ,FALLBACK ,     NO BEFORE JOURNAL,     NO AFTER JOURNAL,     CHECKSUM = DEFAULT,     DEFAULT MERGEBLOCKRATIO,     MAP = TD_MAP1     (      GENDER VARCHAR(1) CHARACTER SET LATIN CASESPECIFIC,      FIRST_NAME VARCHAR(10) CHARACTER SET LATIN CASESPECIFIC,      LAST_NAME VARCHAR(9) CHARACTER SET LATIN CASESPECIFIC,      ADDRESS VARCHAR(25) CHARACTER SET LATIN CASESPECIFIC,      STATE VARCHAR(2) CHARACTER SET LATIN CASESPECIFIC,      CITY VARCHAR(16) CHARACTER SET LATIN CASESPECIFIC,      ZIPCODE INTEGER,      PHONE VARCHAR(14) CHARACTER SET LATIN CASESPECIFIC,      CALL_CENTER_COST BYTEINT)NO PRIMARY INDEX ;
```

2025-08-04 09:27:57,814 - --- RESPONSE ---
The CallCenter table appears to be designed to store customer service representative or call center employee information along with associated operational costs. This table supports a customer service operation by maintaining detailed records of call center staff and their cost metrics.

**Business Purpose:**
This table serves as a master record for call center personnel, enabling the organization to track human resources within their customer service operations while monitoring associated costs. It supports workforce management, cost analysis, and potentially customer service routing decisions.

**Column Business Descriptions:**

**GENDER** - Records the gender of the call center representative (M/F), which may be used for demographic reporting, diversity tracking, or potentially for matching customer preferences in service delivery.

**FIRST_NAME** - The given name of the call center employee, used for identification, personalization in internal systems, and potentially for customer-facing interactions.

**LAST_NAME** - The family name of the call center employee, completing their identification for HR purposes, internal directories, and customer service interactions.

**ADDRESS** - The street address of the employee, used for HR records, emergency contacts, tax reporting, and potentially for determining work location assignments or remote work eligibility.

**STATE** - The state where the employee resides, important for tax withholding, labor law compliance, jurisdiction-specific regulations, and geographic distribution analysis of the workforce.

**CITY** - The city of residence for the employee, used for local tax purposes, commute analysis, and understanding the geographic spread of the call center workforce.

**ZIPCODE** - The postal code providing precise location data for tax calculations, demographic analysis, and potentially for disaster recovery or emergency response planning.

**PHONE** - The contact phone number for the employee, essential for HR communications, emergency contacts, and internal coordination.

**CALL_CENTER_COST** - A cost metric associated with each employee, likely representing their hourly rate, daily cost, or cost allocation factor used for budgeting, profitability analysis, and cost center management within the call center operations.
--------------------------------------------------

2025-08-04 09:27:59,610 - --- SYSTEM PROMPT ---
You are a JSON-only responding assistant.

--- FULL CONTEXT (Session: one-off) ---
[user]: You are a tool analyzer. Based on the tool's name and description, determine if its `col_name` argument is intended for 'numeric' types, 'character' types, or 'any' type. The tool's capabilities are:
Tool Name: `qlty_univariateStatistics`
Tool Description: "
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    "

Contextual Hint: This tool is intended for quantitative analysis. When `col_name` is an argument, it requires a 'numeric' data type.

Respond with a single, raw JSON object with one key, 'dataType', and the value 'numeric', 'character', or 'any'.
Example response for a statistical tool: {{"dataType": "numeric"}}

2025-08-04 09:27:59,610 - --- RESPONSE ---
{"dataType": "numeric"}
--------------------------------------------------

2025-08-04 09:28:14,802 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: ea2dd588-0531-4536-bcaa-8e3267fc962a) ---
[user]: what is the quality of database DEMO_Customer360_db?
[assistant]: ```json
{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
```
[user]: You are a data analyst. Your task is to provide a natural language business description based on a table's DDL.

**CRITICAL INSTRUCTIONS:**
1. Your entire response MUST be plain text.
2. DO NOT generate JSON, tool calls, or any code.
3. Describe the likely business purpose of the table and each column.

--- DDL to Analyze ---
```sql
CREATE MULTISET TABLE DEMO_Customer360_db.Equipment ,FALLBACK ,     NO BEFORE JOURNAL,     NO AFTER JOURNAL,     CHECKSUM = DEFAULT,     DEFAULT MERGEBLOCKRATIO,     MAP = TD_MAP1     (      CUST_ID SMALLINT,      GENDER VARCHAR(1) CHARACTER SET LATIN CASESPECIFIC,      FIRSTNAME VARCHAR(11) CHARACTER SET LATIN CASESPECIFIC,      LASTNAME VARCHAR(9) CHARACTER SET LATIN CASESPECIFIC,      ADDRESS VARCHAR(25) CHARACTER SET LATIN CASESPECIFIC,      STATE VARCHAR(2) CHARACTER SET LATIN CASESPECIFIC,      CITY VARCHAR(16) CHARACTER SET LATIN CASESPECIFIC,      ZIP INTEGER,      EQUIP_LTV SMALLINT)NO PRIMARY INDEX ;
```

2025-08-04 09:28:14,802 - --- RESPONSE ---
# Equipment Table Business Description

The **Equipment** table appears to be a customer equipment lifecycle value tracking table that combines customer demographic information with equipment-related metrics. This table is likely used for customer relationship management and equipment asset valuation purposes.

## Business Purpose
This table serves as a comprehensive customer equipment registry that links customer identity and location data with equipment lifetime value metrics. It enables businesses to track which customers own equipment, understand the geographic distribution of equipment assets, and analyze the long-term value associated with each customer's equipment portfolio.

## Column Descriptions

**CUST_ID** - Customer identifier that uniquely identifies each customer in the system. This serves as the primary key linking to other customer-related tables and enables tracking of individual customer equipment relationships.

**GENDER** - Customer gender classification stored as a single character (likely 'M' for Male, 'F' for Female). This demographic field supports customer segmentation and targeted marketing analysis for equipment products.

**FIRSTNAME** - Customer's first name, providing personalization capabilities for customer communications and service interactions related to equipment sales, maintenance, or support.

**LASTNAME** - Customer's surname, completing the customer identification for personal service delivery and account management in equipment-related transactions.

**ADDRESS** - Street address of the customer, essential for equipment delivery, installation services, field support, and warranty service dispatch. This enables location-based service planning and logistics optimization.

**STATE** - Two-character state abbreviation indicating the customer's geographic location. Critical for regional equipment distribution, state-specific regulations compliance, and territory-based sales management.

**CITY** - Customer's city of residence, providing granular geographic segmentation for local equipment service networks, regional inventory planning, and market penetration analysis.

**ZIP** - Postal ZIP code offering precise geographic targeting for equipment delivery logistics, service territory mapping, and demographic analysis for equipment product positioning.

**EQUIP_LTV** - Equipment Lifetime Value representing the total projected or actual value of equipment associated with this customer. This metric enables customer value ranking, equipment investment ROI analysis, and strategic account prioritization for high-value equipment relationships.

This table structure suggests it's used in industries such as telecommunications, utilities, medical equipment, or industrial machinery where customer-equipment relationships have significant long-term value implications.
--------------------------------------------------

2025-08-04 09:28:26,978 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: ea2dd588-0531-4536-bcaa-8e3267fc962a) ---
[user]: what is the quality of database DEMO_Customer360_db?
[assistant]: ```json
{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
```
[user]: You are a data analyst. Your task is to provide a natural language business description based on a table's DDL.

**CRITICAL INSTRUCTIONS:**
1. Your entire response MUST be plain text.
2. DO NOT generate JSON, tool calls, or any code.
3. Describe the likely business purpose of the table and each column.

--- DDL to Analyze ---
```sql
CREATE MULTISET TABLE DEMO_Customer360_db.Online ,FALLBACK ,     NO BEFORE JOURNAL,     NO AFTER JOURNAL,     CHECKSUM = DEFAULT,     DEFAULT MERGEBLOCKRATIO,     MAP = TD_MAP1     (      LOYALTY_NUM INTEGER,      SEX VARCHAR(1) CHARACTER SET LATIN CASESPECIFIC,      FNAME VARCHAR(11) CHARACTER SET LATIN CASESPECIFIC,      LNAME VARCHAR(9) CHARACTER SET LATIN CASESPECIFIC,      ADDR VARCHAR(25) CHARACTER SET LATIN CASESPECIFIC,      STATE VARCHAR(2) CHARACTER SET LATIN CASESPECIFIC,      CITY VARCHAR(16) CHARACTER SET LATIN CASESPECIFIC,      ZIP INTEGER,      EMAIL VARCHAR(31) CHARACTER SET LATIN CASESPECIFIC,      ONLINE_LTV SMALLINT)NO PRIMARY INDEX ;
```

2025-08-04 09:28:26,978 - --- RESPONSE ---
The **Online** table appears to be a customer database designed to store information about customers who engage with the business through online channels. This table is likely part of a customer relationship management (CRM) or customer analytics system focused on digital engagement.

**Business Purpose:**
This table serves as a repository for online customer profiles, combining basic demographic information with loyalty program data and customer value metrics. It's designed to support customer segmentation, targeted marketing campaigns, and lifetime value analysis for the online customer base.

**Column Descriptions:**

- **LOYALTY_NUM**: A unique identifier for customers enrolled in the company's loyalty or rewards program, enabling tracking of repeat customers and program participation.

- **SEX**: Customer gender classification (likely M/F), used for demographic analysis and gender-based marketing segmentation.

- **FNAME**: Customer's first name, essential for personalized communications and customer service interactions.

- **LNAME**: Customer's last name, completing the personal identification for correspondence and account management.

- **ADDR**: Customer's street address, crucial for shipping, billing, geographic analysis, and location-based marketing initiatives.

- **STATE**: Two-character state code indicating the customer's geographic location, useful for regional analysis and compliance with state-specific regulations.

- **CITY**: Customer's city of residence, enabling local market analysis and city-specific promotional campaigns.

- **ZIP**: Postal zip code providing precise geographic segmentation for demographic analysis and targeted local marketing.

- **EMAIL**: Customer's email address, serving as the primary digital communication channel for marketing, notifications, and customer service.

- **ONLINE_LTV**: Online Customer Lifetime Value - a calculated metric representing the predicted total revenue this customer will generate through online channels, critical for prioritizing high-value customers and optimizing marketing spend.

This table structure suggests it's used for analyzing online customer behavior, calculating return on marketing investment, and developing strategies to increase customer engagement and lifetime value in digital channels.
--------------------------------------------------

2025-08-04 09:28:38,268 - --- SYSTEM PROMPT ---
You are a specialized assistant for interacting with a Teradata database. Your primary goal is to fulfill user requests by selecting the best tool or prompt.

--- **CRITICAL RESPONSE PROTOCOL** ---
Your primary task is to select a single capability to fulfill the user's request. You have two lists of capabilities available: `--- Available Prompts ---` and `--- Available Tools ---`.

1.  **CHOOSE ONE CAPABILITY:** First, review both lists and select the single best capability (either a prompt or a tool) that can fulfill the user's request. If a prompt can solve the entire request, you MUST choose the prompt.

2.  **IDENTIFY THE SOURCE:** Determine which list the chosen capability came from.

3.  **GENERATE RESPONSE JSON:** Your response MUST be a single JSON object. The key you use in this JSON object depends entirely on the source list of your chosen capability:
    -   If your chosen capability is from the `--- Available Prompts ---` list, you **MUST** use the key `"prompt_name"`.
    -   If your chosen capability is from the `--- Available Tools ---` list, you **MUST** use the key `"tool_name"`.

**This is not a suggestion. It is a strict rule. Using `tool_name` for a prompt, or `prompt_name` for a tool, will cause a critical system failure.**

**Example for a Prompt:**
```json
{{
  "prompt_name": "base_tableBusinessDesc",
  "arguments": {{"db_name": "some_db", "table_name": "some_table"}}
}}
```

**Example for a Tool:**
```json
{{
  "tool_name": "base_tableList",
  "arguments": {{"db_name": "some_db"}}
}}
```

--- **CRITICAL RULE: CONTEXT and PARAMETER INFERENCE** ---
You **MUST** remember and reuse information from previous turns.
**Example of CORRECT Inference:**
    -   USER (Turn 1): "what is the business description for the `equipment` table in database `DEMO_Customer360_db`?"
    -   ASSISTANT (Turn 1): (Executes the request)
    -   USER (Turn 2): "ok now what is the quality of that table?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about 'that table'. The previous turn mentioned the `equipment` table in the `DEMO_Customer360_db` database. I will reuse these parameters."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `equipment`.

**Another Example of CORRECT Inference:**
    -   USER (Turn 1): "what's in DEMO_Customer360_db?"
    -   ASSISTANT (Turn 1): (Responds with a list of tables, including `Equipment`)
    -   USER (Turn 2): "what is the quality of Equipment?"
    -   YOUR CORRECT REASONING (Turn 2): "The user is asking about the 'Equipment' table. The previous turns established the context of the `DEMO_Customer360_db` database. I must reuse this database name."
    -   YOUR CORRECT ACTION (Turn 2): `json ...` for `qlty_columnSummary` with `db_name`: `DEMO_Customer360_db` and `table_name`: `Equipment`.

--- **CRITICAL RULE: TOOL ARGUMENT ADHERENCE** ---
You **MUST** use the exact parameter names provided in the tool definitions. Do not invent or guess parameter names.

--- **CRITICAL RULE: SQL GENERATION** ---
When using the `base_readQuery` tool, if you know the database name, you **MUST** use fully qualified table names in your SQL query (e.g., `SELECT ... FROM my_database.my_table`).

--- **CRITICAL RULE: HANDLING TIME-SENSITIVE QUERIES** ---
If the user asks a question involving a relative date (e.g., 'today', 'yesterday', 'this week'), you do not know this information. Your first step **MUST** be to find the current date before proceeding.

**Example of CORRECT Multi-Step Plan:**
    -   USER: "what is the system utilization in number of queries for today?"
    -   YOUR CORRECT REASONING (Step 1): "The user is asking about 'today'. I do not know the current date. My first step must be to get the current date from the database."
    -   YOUR CORRECT ACTION (Step 1):
        ```json
        {{
          "tool_name": "base_readQuery",
          "arguments": {{ "sql": "SELECT CURRENT_DATE" }}
        }}
        ```
    -   TOOL RESPONSE (Step 1): `{{"results": [{{"Date": "2025-07-29"}}]}}`
    -   YOUR CORRECT REASONING (Step 2): "The database returned the current date as 2025-07-29. Now I can use this date to answer the user's original question about system utilization."
    -   YOUR CORRECT ACTION (Step 2):
        ```json
        {{
          "tool_name": "dba_resusageSummary",
          "arguments": {{ "date": "2025-07-29" }}
        }}
        ```

--- **CRITICAL RULE: TOOL FAILURE AND RECOVERY** ---
If a tool call fails with an error message, you **MUST** attempt to recover. Your recovery process is as follows:
1.  **Analyze the Error:** Read the error message carefully. If it indicates an invalid column, parameter, or dimension (e.g., 'Column not found'), identify the specific argument that caused the failure.
2.  **Consult Tool Docs:** Review the documentation for the failed tool that is provided in this system prompt.
3.  **Formulate a New Plan:** Your next thought process should explain the error and propose a corrected tool call. Typically, this means re-issuing the tool call *without* the single failing parameter.
4.  **Retry the Tool:** Execute the corrected tool call.
5.  **Ask for Help:** Only if the corrected tool call also fails should you give up and ask the user for clarification.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.

--- Available Tools ---
- `base_columnDescription(db_name, obj_name)`: 
    Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      obj_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_readQuery(sql)`: 
    Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      sql    - SQL text, with optional bind-parameter placeholders

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableAffinity(db_name, obj_name)`: 
    Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      object_name - table or view name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableDDL(db_name, table_name)`: 
    Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tablePreview(table_name, db_name)`: 
    This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      table_name - table or view name
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `base_tableUsage(db_name)`: 
    Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.

    Arguments:
      db_name - Database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_databaseSpace(db_name)`: 
    Get database space if database name is provided, otherwise get all databases space allocations.

    Arguments:
      db_name - database name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_resusageSummary(dimensions, user_name, date, dayOfWeek, hourOfDay)`: 
    Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.

    Arguments:
      dimensions - list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
      user_name - user name
      date - Date to analyze, formatted as `YYYY-MM-DD`
      dayOfWeek - day of the week to analyze
      hourOfDay - hour of day to analyze

    
- `dba_tableSpace(db_name, table_name)`: 
    Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."

    Arguments:
      db_name - database name
      table_name - table name

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableSqlList(table_name, no_days)`: 
    Get a list of SQL run against a table in the last number of days.

    Arguments:
      table_name - table name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `dba_tableUsageImpact(db_name, user_name)`: 
    Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
    
    Arguments:
      db_name - database name to analyze
      user_name - user name to analyze

    
- `dba_userSqlList(user_name, no_days)`: 
    Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.

    Arguments:
      user_name - user name
      no_days - number of days

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `evs_similarity_search(question, top_k)`: 
    Enterprise Vector Store similarity search

    Arguments:
      question - the query string to search for
      top_k - number of top results to return

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_columnSummary(database_name, table_name, db_name)`: 
    Get the column summary statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_distinctCategories(database_name, table_name, col_name, db_name)`: 
    Get the destinct categories from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_missingValues(database_name, table_name, db_name)`: 
    Get the column names that having missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_negativeValues(database_name, table_name, db_name)`: 
    Get the column names that having negative values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_rowsWithMissingValues(database_name, table_name, col_name, db_name)`: 
    Get the rows with missing values in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_standardDeviation(database_name, table_name, col_name, db_name)`: 
    Get the standard deviation from column in a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `qlty_univariateStatistics(database_name, table_name, col_name, db_name)`: 
    Get the univariate statistics for a table.

    Arguments:
      database_name - name of the database
      table_name - table name to analyze
      col_name - column name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `rag_executeWorkflow(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.


    This function handles the entire RAG pipeline:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Generate query embeddings (tokenization + embedding)
    4. Perform semantic search against chunk embeddings
    5. Return retrieved context chunks for answer generation

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided)

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `rag_executeWorkflow_ivsm(question, k)`: 
    Execute complete RAG workflow to answer user questions based on document context.

    This function handles the entire RAG pipeline using IVSM functions:
    1. Configuration setup (using configurable values from rag_config.yml)
    2. Store user query (with /rag prefix stripping)
    3. Tokenize query using ivsm.tokenizer_encode
    4. Create embedding view using ivsm.IVSM_score
    5. Convert embeddings to vector columns using ivsm.vector_to_columns
    6. Perform semantic search against chunk embeddings

    The function uses configuration values from rag_config.yml with fallback defaults.

    Arguments:
      question - user question to process
      k - number of top-k results to return (optional, uses config default if not provided

    Returns:
      Returns the top-k most relevant chunks with metadata for context-grounded answer generation.
    
- `sec_rolePermissions(role_name)`: 
    Get permissions for a role.

    Arguments:
      role_name - role name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userDbPermissions(user_name)`: 
    Get permissions for a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `sec_userRoles(user_name)`: 
    Get roles assigned to a user.

    Arguments:
      user_name - user name to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `tmpl_nameOfTool(argument)`: 
    <description of what the tool is for>

    Arguments:
      arguments - arguments to analyze

    Returns:
      ResponseType: formatted response with query results + metadata
    
- `cust_activeUsers()`: Fetch currently active database users
- `cust_td_serverInfo(infokey)`: Get the Teradata software information: demonstrates how to use parameters for prepared statements.
- `get_cube_cust_cube_db_space_metrics(dimensions, measures)`: 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate (must match cube definition). Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

    Returns:
        Query result as a formatted response.
    
- `dba_databaseVersion()`:  Get Teradata database version information.
- `dba_flowControl()`:  Get the Teradata flow control metrics.
- `dba_featureUsage()`: Get the user feature usage metrics.
- `dba_userDelay()`: Get the Teradata user delay metrics.
- `dba_sessionInfo(user_name)`: Get the Teradata session information for user.
- `base_tableList(db_name)`: Lists all tables in a database.
- `base_databaseList()`: Lists all databases in the Teradata System.
- `reconnect_to_database()`: Reconnect to the Teradata database if the connection is lost.
- `fs_setFeatureStoreConfig(data_domain, db_name, entity)`: Set or update the feature store configuration (database and data domain).
- `fs_getFeatureStoreConfig()`: Display the current feature store configuration (database and data domain).
- `fs_isFeatureStorePresent(db_name)`: Check if a feature store is present in the specified database.
- `fs_featureStoreContent()`: Returns a summary of the feature store content. Use this to understand what data is available in the feature store
- `fs_getDataDomains(entity)`: List the available data domains. Requires a configured `db_name`  in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_getFeatures()`: List the list of features. Requires a configured `db_name` and  `data_domain` in the feature store config. Use this to explore the features available .
- `fs_getAvailableDatasets()`: List the list of available datasets.Requires a configured `db_name` in the feature store config.Use this to explore the datasets that are available .
- `fs_getFeatureDataModel()`: Return the schema of the feature store.Requires a feature store in the configured database (`db_name`).
- `fs_getAvailableEntities()`: List the available entities for a given data domain. Requires a configured `db_name` and `data_domain` and  `entity` in the feature store config. Use this to explore which entities can be used when building a dataset.
- `fs_createDataset(entity_name, feature_selection, dataset_name, target_database)`: Create a dataset using selected features and an entity from the feature store. The dataset is created in the specified target database under the given name. Requires a configured feature store and data domain. Registers the dataset in the catalog automatically. Use this when you want to build and register a new dataset for analysis or modeling.

--- Available Prompts ---
- `cust_promptExample`: my prompt description
- `test_secTools`: Test all the sec MCP tools.
- `test_dbaTools`: Test all the DBA MCP tools.
- `dba_tableArchive`: The following prompt is used to guide the Teradata DBA in finding opportunities for archiving data.
- `dba_databaseLineage`: You are a Teradata DBA who is an expert in finding the lineage of tables in a database.
- `dba_tableDropImpact`: You are a Teradata DBA who is an expert in finding the impact of dropping a table.
- `dba_databaseHealthAssessment`: You are a Teradata DBA who is an expert in assessing the health of a database.
- `dba_userActivityAnalysis`: Analyze Teradata user activity patterns for the past 7 days
- `dba_systemVoice`: Analyze Teradata user activity patterns for the past 7 days
- `test_ragTools`: Test all the qlty MCP tools.
- `rag_guidelines`: Guidelines for Retrieval-Augmented Generation (RAG) mode.
- `test_qltyTools`: Test all the qlty MCP tools.
- `qlty_databaseQuality`: Database data quality assessment.
- `test_baseTools`: Test all base tools in the Teradata MCP server.
- `base_query`: Help users interact with  Teradata databases effectively.
- `base_tableBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of tables in a database.
- `base_databaseBusinessDesc`: You are a Teradata DBA who is an expert in describing the business use of databases.

--- **Charting Rules** ---
- Charting is disabled. Do NOT use any charting tools.



--- FULL CONTEXT (Session: ea2dd588-0531-4536-bcaa-8e3267fc962a) ---
[user]: what is the quality of database DEMO_Customer360_db?
[assistant]: ```json
{
  "prompt_name": "qlty_databaseQuality",
  "arguments": {"db_name": "DEMO_Customer360_db"}
}
```
[user]: You are a data analyst. Your task is to provide a natural language business description based on a table's DDL.

**CRITICAL INSTRUCTIONS:**
1. Your entire response MUST be plain text.
2. DO NOT generate JSON, tool calls, or any code.
3. Describe the likely business purpose of the table and each column.

--- DDL to Analyze ---
```sql
CREATE MULTISET TABLE DEMO_Customer360_db.Cookie ,FALLBACK ,     NO BEFORE JOURNAL,     NO AFTER JOURNAL,     CHECKSUM = DEFAULT,     DEFAULT MERGEBLOCKRATIO,     MAP = TD_MAP1     (      ADDR_LN_1_TXT VARCHAR(25) CHARACTER SET LATIN CASESPECIFIC,      ST_OR_PROV_CD VARCHAR(2) CHARACTER SET LATIN CASESPECIFIC,      CITY_NAME VARCHAR(21) CHARACTER SET LATIN CASESPECIFIC,      ZIP INTEGER,      COOKIE VARCHAR(32) CHARACTER SET LATIN CASESPECIFIC,      CAMPAIGN VARCHAR(7) CHARACTER SET LATIN CASESPECIFIC)NO PRIMARY INDEX ;
```

2025-08-04 09:28:38,268 - --- RESPONSE ---
The Cookie table appears to be designed for tracking digital marketing campaigns and their associated geographic locations. This table likely serves as a bridge between online customer interactions and their physical addresses for marketing attribution and campaign effectiveness analysis.

**Business Purpose:**
This table supports digital marketing operations by linking website cookies (which track user behavior online) to specific marketing campaigns and customer locations. It enables businesses to understand which campaigns are driving engagement from different geographic regions and helps in measuring campaign ROI across various markets.

**Column Descriptions:**

- **ADDR_LN_1_TXT**: The primary street address line for the customer or prospect, used for geographic segmentation and direct mail coordination with digital campaigns.

- **ST_OR_PROV_CD**: Two-character state or province code that enables regional campaign analysis and helps identify which geographic markets are responding best to specific campaigns.

- **CITY_NAME**: The city name associated with the customer, providing more granular geographic insights for local market analysis and city-level campaign targeting.

- **ZIP**: Postal code that allows for precise geographic targeting and demographic analysis, often used for mapping campaign performance to specific neighborhoods or economic zones.

- **COOKIE**: A unique identifier that tracks individual user sessions and behavior across the company's digital properties, enabling personalized marketing and user journey analysis.

- **CAMPAIGN**: A campaign identifier code that links the cookie and location data to specific marketing initiatives, allowing for campaign performance measurement and attribution analysis.

This table structure suggests it's used for marketing analytics, campaign attribution, and geographic performance analysis in digital marketing operations.
--------------------------------------------------


2025-08-24 18:08:02,342 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'how many databases are on the system?'

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-08-24 18:08:02,343 - --- RESPONSE ---
```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
--------------------------------------------------

2025-08-24 18:08:02,890 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Deciding next tactical action for phase: Determine how many databases are on the system.

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.

2025-08-24 18:08:02,890 - --- RESPONSE ---
```json
{"tool_name": "base_databaseList", "arguments": {}}
```
--------------------------------------------------

2025-08-24 18:08:06,276 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- History (History Disabled: False) ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'how many databases are on the system?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_databaseList",
        "sql": "select DataBaseName, DECODE(DBKind, 'U', 'User', 'D','DataBase') as DBType, CommentString from dbc.DatabasesV dv where OwnerName <> 'PDCRADM'",
        "columns": [
          {
            "name": "DatabaseName",
            "type": "str"
          },
          {
            "name": "DBType",
            "type": "str"
          },
          {
            "name": "CommentString",
            "type": "str"
          }
        ],
        "row_count": 50
      },
      "results": [
        {
          "DatabaseName": "TD_SYSXML",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DEMO_Customer360_db",
          "DBType": "DataBase",
          "CommentString": "CREATED_BY: DEMO_Customer360_local"
        },
        {
          "DatabaseName": "gs_tables_db",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "All",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSGPL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "mldb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt2",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SYSJDBC",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_SYSFNLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TD_ANALYTICS_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DBC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "demo_user",
          "DBType": "User",
          "CommentString": "Logon ID for the end user to run demonstrations"
        },
        {
          "DatabaseName": "tapidb",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SQLJ",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Default",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_DB",
          "DBType": "DataBase",
          "CommentString": "As-A-Service : APIs DB "
        },
        {
          "DatabaseName": "EXTUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "val",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "PUBLIC",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "dbcmngr",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_BAR",
          "DBType": "User",
          "CommentString": "As-A-Service : Backup and Restore "
        },
        {
          "DatabaseName": "TDStats",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "SYSBAR",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "External_AP",
          "DBType": "User",
          "CommentString": "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning"
        },
        {
          "DatabaseName": "TDaaS_Monitor",
          "DBType": "User",
          "CommentString": "As-A-Service Monitor : Monitor Resource Usage "
        },
        {
          "DatabaseName": "tdwm",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "LockLogShredder",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "modelops",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDQCD",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "GLOBAL_FUNCTIONS",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "system",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDMaps",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "Sys_Calendar",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDPUSER",
          "DBType": "User",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDBCMgmt",
          "DBType": "DataBase",
          "CommentString": "POG/COG router management database"
        },
        {
          "DatabaseName": "SYSUDTLIB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Support",
          "DBType": "User",
          "CommentString": "As-A-Service Support : Problem and Error Investigation "
        },
        {
          "DatabaseName": "TD_SERVER_DB",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "DemoNow_Monitor",
          "DBType": "User",
          "CommentString": "Support logon username for monitoring the platform"
        },
        {
          "DatabaseName": "SystemFe",
          "DBType": "User",
          "CommentString": "The ID 'SystemFe' is reserved for use by System Field Engineers"
        },
        {
          "DatabaseName": "DEMO_Customer360",
          "DBType": "DataBase",
          "CommentString": "CREATED_BY: DEMO_Customer360_local"
        },
        {
          "DatabaseName": "SYSSPATIAL",
          "DBType": "DataBase",
          "CommentString": "None"
        },
        {
          "DatabaseName": "TDaaS_Maint",
          "DBType": "User",
          "CommentString": "As-A-Service Maintenance : Patching and Configuration "
        },
        {
          "DatabaseName": "TDaaS_TDBCMgmt1",
          "DBType": "User",
          "CommentString": "As-A-Service : POG/COG router management user"
        },
        {
          "DatabaseName": "SysAdmin",
          "DBType": "User",
          "CommentString": "The ID 'SysAdmin' is reserved for use by the System Administrators"
        },
        {
          "DatabaseName": "Crashdumps",
          "DBType": "User",
          "CommentString": "The ID 'Crashdumps' is reserved for use by Crashdumps Processing Software"
        },
        {
          "DatabaseName": "DEMO_DigitalEvents",
          "DBType": "DataBase",
          "CommentString": "CREATED_BY: DEMO_DigitalEvents_local"
        },
        {
          "DatabaseName": "DEMO_DigitalEvents_db",
          "DBType": "DataBase",
          "CommentString": "CREATED_BY: DEMO_DigitalEvents_local"
        },
        {
          "DatabaseName": "SYSUIF",
          "DBType": "DataBase",
          "CommentString": "None"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

--- ADDITIONAL FORMATTING INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {{"value": "21", "label": "Databases on system"}}`
    - Qualitative Example: `Key Metric: {{"value": "High", "label": "System Utilization"}}`
    If there is no single primary value, you MUST omit this line entirely.

2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.

3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-08-24 18:08:06,276 - --- RESPONSE ---
Key Metric: {"value": "50", "label": "Databases and Users on the system"}
There are 50 databases and users on the system.

## Key Observations
*   The system contains both DataBases and Users.
*   There are several system databases, such as TD_SYSXML, gs_tables_db, TD_SYSGPL, SYSJDBC, TD_SYSFNLIB, TD_ANALYTICS_DB, SYSLIB, SQLJ, TDaaS_DB, dbcmngr, TDStats, SYSBAR, modelops, TDQCD, GLOBAL_FUNCTIONS, system, TDBCMgmt, SYSUDTLIB, TD_SERVER_DB, SYSSPATIAL, DEMO_DigitalEvents, DEMO_DigitalEvents_db and SYSUIF.
*   There are also user accounts, such as All, mldb, TDaas_TDBCMgmt2, DBC, demo_user, tapidb, Default, EXTUSER, val, PUBLIC, TDaaS_BAR, External_AP, TDaaS_Monitor, tdwm, LockLogShredder, TDMaps, Sys_Calendar, TDPUSER, TDaaS_Support, DemoNow_Monitor, SystemFe, TDaaS_Maint, TDaaS_TDBCMgmt1, SysAdmin, and Crashdumps.
*   Some databases and users are related to "As-A-Service" (TDaaS), suggesting cloud-based services.
*   Several DEMO databases exist, possibly for demonstration purposes.
*   Some users have comments indicating their purpose, such as "Logon ID for the end user to run demonstrations" for demo_user or "The ID 'External_AP' is reserved for use by LDAP Auto Provisioning" for External_AP.
*   The query excludes databases owned by PDCRADM.
--------------------------------------------------

2025-08-24 18:08:14,299 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what's in DEMO_Customer360_db'

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-08-24 18:08:14,300 - --- RESPONSE ---
```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
--------------------------------------------------

2025-08-24 18:08:15,023 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Deciding next tactical action for phase: List all tables in the DEMO_Customer360_db database.

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.

2025-08-24 18:08:15,023 - --- RESPONSE ---
```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```
--------------------------------------------------

2025-08-24 18:08:16,302 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- History (History Disabled: False) ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in DEMO_Customer360_db'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q') and UPPER(tv.DatabaseName) = UPPER('DEMO_Customer360_db')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 2
      },
      "results": [
        {
          "TableName": "Equipment"
        },
        {
          "TableName": "CallCenter"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
None

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

--- ADDITIONAL FORMATTING INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {{"value": "21", "label": "Databases on system"}}`
    - Qualitative Example: `Key Metric: {{"value": "High", "label": "System Utilization"}}`
    If there is no single primary value, you MUST omit this line entirely.

2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.

3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-08-24 18:08:16,302 - --- RESPONSE ---
Key Metric: {"value": "CallCenter, Equipment", "label": "Tables in DEMO_Customer360_db"}
DEMO_Customer360_db contains the tables Equipment and CallCenter.

## Key Observations

*   The database DEMO_Customer360_db contains two tables: Equipment and CallCenter.
*   The tables were identified by querying the `dbc.TablesV` system view.
*   The query filtered for tables, views, objects, and queue tables (`TableKind in ('T','V', 'O', 'Q')`) within the specified database.
--------------------------------------------------

2025-08-24 18:08:32,489 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what's in callcenter?'

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in callcenter?

--- CONTEXT ---
- User's Original Question (for reference): what's in callcenter?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-08-24 18:08:32,490 - --- RESPONSE ---
```json
[
  {
    "phase": 1,
    "goal": "Determine what's in the 'callcenter' table.",
    "relevant_tools": [
      "base_columnDescription"
    ]
  }
]
```
--------------------------------------------------

2025-08-24 18:08:33,267 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Deciding next tactical action for phase: Determine what's in the 'callcenter' table.

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in callcenter?

--- CONTEXT ---
- User's Original Question (for reference): what's in callcenter?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine what's in the 'callcenter' table.",
    "relevant_tools": [
      "base_columnDescription"
    ]
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in callcenter?

--- CURRENT PHASE GOAL ---
Determine what's in the 'callcenter' table.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.

2025-08-24 18:08:33,267 - --- RESPONSE ---
```json
{"tool_name": "base_columnDescription", "arguments": {"database_name": "DEMO_Customer360_db", "obj_name": "CallCenter"}}
```
--------------------------------------------------

2025-08-24 18:08:36,076 - --- FULL CONTEXT (Session: one-off) ---
--- REASON FOR CALL ---
Executing CoreLLMTask: You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- History (History Disabled: False) ---


--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:
You are a text processing and synthesis assistant.

USER PROMPT:
You are a highly capable text processing and synthesis assistant.

--- PRIMARY GOAL ---
Your most important task is to directly answer the user's original question: 'what's in callcenter?'.
You MUST begin your response with the direct answer. Do not repeat the user's question or use conversational intros like 'Here is...'. After providing the direct answer, you may then proceed with a more general summary or analysis of the data.

--- TASK ---
You are an expert data analyst. Your task is to create a final report for the user based on the provided data.

--- RELEVANT DATA (Selected from Previous Phases) ---
{
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_columnDescription",
        "database": "DEMO_Customer360_db",
        "object": "CallCenter",
        "column_count": 9
      },
      "results": [
        {
          "TableName": "CallCenter",
          "ColumnName": "LAST_NAME",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "STATE",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "CITY",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "ZIPCODE",
          "CType": "INTEGER"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "CALL_CENTER_COST",
          "CType": "BYTEINT"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "PHONE",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "ADDRESS",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "FIRST_NAME",
          "CType": "VARCHAR"
        },
        {
          "TableName": "CallCenter",
          "ColumnName": "GENDER",
          "CType": "VARCHAR"
        }
      ]
    }
  ]
}

--- KNOWN CONTEXT ---
The following key information has already been established in previous steps. You MUST use this information to populate header fields like 'Table Name' or 'Database Name'.
- database_name: DEMO_Customer360_db

--- SEMANTIC GUIDANCE ---
When the 'TASK' asks for a 'description', 'analysis', or 'summary', you MUST synthesize new content that reflects the *semantic intent* of the request.
For example:
- If the 'TASK' asks for a 'business description of a table', you MUST explain its purpose from an organizational, functional, or analytical viewpoint, and the business significance of its columns. Do NOT simply reiterate technical DDL (Data Definition Language) information, even if it is present in the `RELEVANT DATA`.
- If the 'TASK' asks for a 'summary of errors', you MUST provide a concise overview of the issues, not just a list of error codes.
Always prioritize generating content that matches the *meaning* and *purpose* of the 'TASK', interpreting the raw data to produce the desired semantic output.

--- CRITICAL RULES ---
1. **Separate Data from Description:** If the 'TASK' requires you to output header fields (like `***Table Name:***` or `***Database Name:***`) AND a main description, you MUST treat these as separate steps. First, populate the header fields using the 'KNOWN CONTEXT'. Then, write the main description. Do NOT merge context data (like the database name) into a single header field.
2. **Content and Formatting Precision:** You MUST adhere to any and all formatting instructions contained in the 'TASK' description with absolute precision. Do not deviate, simplify, or change the requested format in any way. You MUST generate content that genuinely fulfills the semantic goal of the 'TASK'.
3. **Key Name Adherence:** If the 'TASK' description provides an example format, you MUST use the exact key names (e.g., `***Description:***`, `***Table Name:***`) shown in the example. Do not invent new key names or use synonyms like 'Table Description'.
4. **Column Placeholder Replacement:** If the 'TASK' involves describing table columns and the formatting guidelines include a placeholder like `***ColumnX:***` or `***[Column Name]:***`, you MUST replace that placeholder with the actual name of the column you are describing (e.g., `***CUST_ID:***`, `***FIRSTNAME:***`). Do not use generic, numbered placeholders like 'Column1', 'Column2', etc.
5. **Layout and Line Breaks:** Each key-value pair or list item specified in the formatting guidelines MUST be on its own separate line. Do not combine multiple items onto a single line.

--- ADDITIONAL FORMATTING INSTRUCTIONS ---
Your entire response MUST be formatted in standard markdown and MUST be structured as follows:

1.  **(Optional) Key Metric:** If the answer to the user's question can be summarized by a single primary value (either quantitative like a number, or qualitative like a status), you MUST provide it on the very first line in a specific JSON format. The line must start with `Key Metric: ` followed by a JSON object with a `value` (as a string) and a `label` (a short description).
    - Quantitative Example: `Key Metric: {{"value": "21", "label": "Databases on system"}}`
    - Qualitative Example: `Key Metric: {{"value": "High", "label": "System Utilization"}}`
    If there is no single primary value, you MUST omit this line entirely.

2.  **The Direct Answer:** This part MUST immediately follow the Key Metric (or be the first line if no metric is provided). It must be a single, concise sentence that directly and factually answers the user's question.

3.  **Key Observations:** This section MUST start with a level-2 markdown heading (`## Key Observations`). It should contain a bulleted list of all supporting details and context.

Your response should be the direct result of the task. Do not add any conversational text or extra formatting unless explicitly requested by the task description.

2025-08-24 18:08:36,078 - --- RESPONSE ---
Key Metric: {"value": "9", "label": "Number of columns"}
The CallCenter table contains customer contact information and location details, along with call center costs.

## Key Observations
*   **Database Name:** DEMO_Customer360_db
*   **Table Name:** CallCenter
*   **Column Count:** 9
*   **Columns:**
    *   **LAST_NAME:** Customer's last name (VARCHAR).
    *   **STATE:** State where the call center is located (VARCHAR).
    *   **CITY:** City where the call center is located (VARCHAR).
    *   **ZIPCODE:** Zip code of the call center location (INTEGER).
    *   **CALL_CENTER_COST:** Cost associated with the call center (BYTEINT).
    *   **PHONE:** Phone number of the call center (VARCHAR).
    *   **ADDRESS:** Address of the call center (VARCHAR).
    *   **FIRST_NAME:** Customer's first name (VARCHAR).
    *   **GENDER:** Gender of the customer (VARCHAR).
--------------------------------------------------

2025-08-24 18:08:53,353 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Generating a strategic meta-plan for the goal: 'what is the business specification for equipment?'

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in callcenter?

--- CONTEXT ---
- User's Original Question (for reference): what's in callcenter?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine what's in the 'callcenter' table.",
    "relevant_tools": [
      "base_columnDescription"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in callcenter?

--- CURRENT PHASE GOAL ---
Determine what's in the 'callcenter' table.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_columnDescription", "arguments": {"database_name": "DEMO_Customer360_db", "obj_name": "CallCenter"}}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what is the business specification for equipment?

--- CONTEXT ---
- User's Original Question (for reference): what is the business specification for equipment?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter",
  "obj_name": "CallCenter",
  "column_name": "GENDER"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.


2025-08-24 18:08:53,353 - --- RESPONSE ---
```json
[
  {
    "phase": 1,
    "goal": "Find the database and table containing the business specification for 'equipment'.",
    "relevant_tools": [
      "base_tableList",
      "base_columnDescription"
    ]
  },
  {
    "phase": 2,
    "goal": "Describe the business purpose of the 'equipment' table, assuming it exists.",
    "executable_prompt": "base_tableBusinessDesc",
    "arguments": {}
  }
]
```
--------------------------------------------------

2025-08-24 18:08:54,363 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Deciding next tactical action for phase: Find the database and table containing the business specification for 'equipment'.

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in callcenter?

--- CONTEXT ---
- User's Original Question (for reference): what's in callcenter?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine what's in the 'callcenter' table.",
    "relevant_tools": [
      "base_columnDescription"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in callcenter?

--- CURRENT PHASE GOAL ---
Determine what's in the 'callcenter' table.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_columnDescription", "arguments": {"database_name": "DEMO_Customer360_db", "obj_name": "CallCenter"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what is the business specification for equipment?

--- CONTEXT ---
- User's Original Question (for reference): what is the business specification for equipment?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter",
  "obj_name": "CallCenter",
  "column_name": "GENDER"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Find the database and table containing the business specification for 'equipment'.",
    "relevant_tools": [
      "base_tableList",
      "base_columnDescription"
    ]
  },
  {
    "phase": 2,
    "goal": "Describe the business purpose of the 'equipment' table, assuming it exists.",
    "executable_prompt": "base_tableBusinessDesc",
    "arguments": {}
  }
]
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what is the business specification for equipment?

--- CURRENT PHASE GOAL ---
Find the database and table containing the business specification for 'equipment'.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.

2025-08-24 18:08:54,363 - --- RESPONSE ---
```json
{"tool_name": "base_tableList", "arguments": {}}
```
--------------------------------------------------

2025-08-24 18:08:56,145 - --- FULL CONTEXT (Session: 6e7103ed-e5df-47f2-b14e-4a3b455647b7) ---
--- REASON FOR CALL ---
Deciding next tactical action for phase: Describe the business purpose of the 'equipment' table, assuming it exists.

--- History (History Disabled: False) ---
[user]: You are a helpful assistant.
[model]: Understood.
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
how many databases are on the system?

--- CONTEXT ---
- User's Original Question (for reference): how many databases are on the system?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine how many databases are on the system.",
    "relevant_tools": [
      "base_databaseList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
how many databases are on the system?

--- CURRENT PHASE GOAL ---
Determine how many databases are on the system.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_databaseList`
  - Description: 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata


- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_databaseList", "arguments": {}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in DEMO_Customer360_db

--- CONTEXT ---
- User's Original Question (for reference): what's in DEMO_Customer360_db
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "SYSUIF"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "List all tables in the DEMO_Customer360_db database.",
    "relevant_tools": [
      "base_tableList"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in DEMO_Customer360_db

--- CURRENT PHASE GOAL ---
List all tables in the DEMO_Customer360_db database.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {"database_name": "DEMO_Customer360_db"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what's in callcenter?

--- CONTEXT ---
- User's Original Question (for reference): what's in callcenter?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Determine what's in the 'callcenter' table.",
    "relevant_tools": [
      "base_columnDescription"
    ]
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what's in callcenter?

--- CURRENT PHASE GOAL ---
Determine what's in the 'callcenter' table.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_columnDescription", "arguments": {"database_name": "DEMO_Customer360_db", "obj_name": "CallCenter"}}
```
[user]: SYSTEM PROMPT:

# Core Directives
You are a specialized assistant for a Teradata database system. Your primary goal is to fulfill user requests by selecting the best capability (a tool or a prompt) from the categorized lists provided and supplying all necessary arguments.

# Response Format
Your response MUST be a single JSON object for a tool/prompt call OR a single plain text string for a final answer.

1.  **Tool/Prompt Calls (JSON format):**
    -   If the capability is a prompt, you MUST use the key `"prompt_name"`.
    -   If the capability is a tool, you MUST use the key `"tool_name"`.
    -   Provide all required arguments. Infer values from the conversation history if necessary.
    -   Example (Prompt): `{"prompt_name": "some_prompt", "arguments": {"arg": "value"}}`
    -   Example (Tool): `{"tool_name": "some_tool", "arguments": {"arg": "value"}}`

2.  **Final Answer (Plain Text format):**
    -   When you have sufficient information to fully answer the user's request, you MUST stop using tools.
    -   Your response MUST begin with the exact prefix `FINAL_ANSWER:`, followed by a natural language summary.
    -   Example: `FINAL_ANSWER: I found 48 databases on the system. The details are displayed below.`

# Decision Process
To select the correct capability, you MUST follow this two-step process, governed by one critical rule:

**CRITICAL RULE: Follow this strict hierarchy for capability selection:**
1.  **Prioritize Pre-defined Analysis/Reports (Prompts):** If the user's request is for an **analysis, description, or summary** that is a strong semantic match for an available `prompt`, you **MUST** select that `prompt_name`. Prompts are the preferred method for generating these pre-defined analytical outputs.
2.  **Default to Direct Actions (Tools):** If no analytical prompt is a direct match, or if the user's request is a direct command (e.g., "list...", "count...", "show me..."), you **MUST** treat the request as a direct action. Select the most specific `tool_name` that fulfills this action.

# Few-Shot Examples
Here are examples of the correct thinking process:

**Example 1: Direct Action Request**
- **User Query:** "what is the quality of table 'online' in database 'DEMO_Customer360_db'?"
- **Thought Process:**
    1. The user's request is about "quality," but it's a direct question, not a request for a broad "description" or "summary." No prompt for a pre-defined analysis is a perfect match.
    2. Therefore, I move to step 2 of my critical rule: treat this as a direct action.
    3. The user's query is about a **table**. I must choose a table-level tool.
    4. The `qlty_columnSummary` tool takes a `table_name` and is the most specific, correct choice for this direct action.
- **Correct Response:** `{"tool_name": "qlty_columnSummary", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "online"}}`

**Example 2: Pre-defined Analysis Request**
- **User Query:** "describe the business purpose of the 'DEMO_Customer360_db' database"
- **Thought Process:**
    1. The user's request is for a "business purpose" description, which is a pre-defined analysis. I will check for a matching prompt first.
    2. The `base_databaseBusinessDesc` prompt is described as being for this exact purpose. It is a strong semantic match.
    3. According to my critical rule, I **MUST** select this prompt.
- **Correct Response:** `{"prompt_name": "base_databaseBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db"}}`

# Best Practices
- **Context is Key:** Always use information from previous turns to fill in arguments like `db_name` or `table_name`.
- **Error Recovery:** If a tool fails, analyze the error message and attempt to call the tool again with corrected parameters. Only ask the user for clarification if you cannot recover.
- **SQL Generation:** When using the `base_readQuery` tool, you MUST use fully qualified table names in your SQL (e.g., `SELECT ... FROM my_database.my_table`).
- **Time-Sensitive Queries:** For queries involving relative dates (e.g., 'today', 'this week'), you MUST use the `util_getCurrentDate` tool first to determine the current date before proceeding.
- **Out of Scope:** If the user's request is unrelated to the available capabilities, respond with a `FINAL_ANSWER:` that politely explains you cannot fulfill the request and restates your purpose.
- **CRITICAL: Avoid Repetitive Behavior.** You are a highly intelligent agent. Do not get stuck in a loop by repeating the same tool calls or by cycling through the same set of tools. Once a tool has returned a successful result with data that is relevant to the user's request, do not call that same tool again unless there is a new and compelling reason to do so. If you have called a series of tools and believe you have enough information, you must call a FINAL_ANSWER. Do not repeat tool calls just to be "through".


# Capabilities
--- Available Tools ---
--- Category: Data Quality ---
- `qlty_columnSummary` (tool): Get the column summary statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_distinctCategories` (tool): Get the destinct categories from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_missingValues` (tool): Get the column names that having missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_negativeValues` (tool): Get the column names that having negative values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
- `qlty_rowsWithMissingValues` (tool): Get the rows with missing values in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_standardDeviation` (tool): Get the standard deviation from column in a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
- `qlty_univariateStatistics` (tool): Get the univariate statistics for a table.
  - Arguments:
    - `database_name` (string, required): name of the database
    - `table_name` (string, required): table name to analyze
    - `column_name` (string, required): column name to analyze
--- Category: Database Information ---
- `base_databaseList` (tool): 
Lists all databases in the Teradata System.

Returns:
  ResponseType: formatted response with query results + metadata

- `cust_activeUsers` (tool): Fetch currently active database users
- `cust_td_serverInfo` (tool): Get the Teradata software information: demonstrates how to use parameters for prepared statements.
  - Arguments:
    - `infokey` (string, required): Infokey
- `get_cube_cust_cube_db_space_metrics` (tool): 
    Tool to query the cube 'table_skew_pct'.
    Get the Teradata database space metrics for tables and databases

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - DatabaseName: Name of the database
    - TableName: Name of the table

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - current_perm: Object perm space in bytes
    - peak_perm: Object peak perm space in bytes
    - table_skew_pct: Object skew percentage

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
DatabaseName = 'value'
TableName = 'value'
current_perm > 1000
peak_perm > 1000
table_skew_pct > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
- `dba_databaseVersion` (tool):  Get Teradata database version information.
--- Category: Performance ---
- `dba_databaseSpace` (tool): Get database space if database name is provided, otherwise get all databases space allocations.
  - Arguments:
    - `database_name` (string, required): database name
- `dba_resusageSummary` (tool): Get the Teradata system usage summary metrics by weekday and hour for each workload type and query complexity bucket.
  - Arguments:
    - `dimensions` (array, optional): list of dimensions to aggregate the resource usage summary. All dimensions are: ["LogDate", "hourOfDay", "dayOfWeek", "workloadType", "workloadComplexity", "UserName", "AppId", "StatementType"]
    - `user_name` (string, optional): user name
    - `date` (string, optional): Date to analyze, formatted as `YYYY-MM-DD`
    - `dayOfWeek` (string, optional): day of the week to analyze
    - `hourOfDay` (string, optional): hour of day to analyze
- `dba_tableSpace` (tool): Get table space used for a table if table name is provided or get table space for all tables in a database if a database name is provided."
  - Arguments:
    - `database_name` (string, required): database name
    - `table_name` (string, required): table name
- `dba_tableSqlList` (tool): Get a list of SQL run against a table in the last number of days.
  - Arguments:
    - `table_name` (string, required): table name
    - `no_days` (integer, optional): number of days
- `dba_tableUsageImpact` (tool): Measure the usage of a table and views by users, this is helpful to understand what user and tables are driving most resource usage at any point in time.
  - Arguments:
    - `database_name` (string, optional): database name to analyze
    - `user_name` (string, optional): user name to analyze
- `dba_userSqlList` (tool): Get a list of SQL run by a user in the last number of days if a user name is provided, otherwise get list of all SQL in the last number of days.
  - Arguments:
    - `user_name` (string, required): user name
    - `no_days` (integer, optional): number of days
- `dba_flowControl` (tool): Get the Teradata flow control metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_featureUsage` (tool): Get the user feature usage metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_userDelay` (tool): Get the Teradata user delay metrics for a specified date range.
  - Arguments:
    - `start_date` (string, required): Start Date
    - `end_date` (string, required): End Date
- `dba_sessionInfo` (tool): Get the Teradata session information for user.
  - Arguments:
    - `user_name` (string, required): User Name
- `dba_systemSpace` (tool): Get the Teradata total system database space usage.
--- Category: Sales ---
- `sales_top_customers` (tool): Get the top 20 customers by lifetime value.
- `sales_customer_profile` (tool): Get customer profile and metrics.
  - Arguments:
    - `customer_key` (string, required): Customer Key
- `get_cube_sales_cube` (tool): 
    Tool to query the cube 'order_count'.
    Get the key sales metrics: USD amount and number of orders.

    Expected inputs:
        dimensions (str): Comma-separated dimension names to group by. Allowed values:
    - customer_key: Key for the customer
    - sales_year: Year of the sale
    - sales_month: Month of the sale

        measures (str): Comma-separated measure names to aggregate. Allowed values:
    - gift_amount_usd: Total gift card amount used for the order in USD
    - total_amount_usd: Total order amount in USD
    - order_count: Total number of orders

        filters (str): Comma-separated filter expressions to apply to either dimensions or measures selected. The dimension or measure used must be in the dimension list to group by or measure list, use valid SQL expressions, for example:
customer_key = 'value'
sales_year = 'value'
sales_month = 'value'
gift_amount_usd > 1000
total_amount_usd > 1000
order_count > 1000

    Returns:
        Query result as a formatted response.
    
  - Arguments:
    - `dimensions` (string, required): dimensions
    - `measures` (string, required): measures
    - `filters` (string, optional): filters
--- Category: Security ---
- `sec_rolePermissions` (tool): Get permissions for a role.
  - Arguments:
    - `role_name` (string, required): role name to analyze
- `sec_userDbPermissions` (tool): Get permissions for a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
- `sec_userRoles` (tool): Get roles assigned to a user.
  - Arguments:
    - `user_name` (string, required): user name to analyze
--- Category: Table Management ---
- `base_columnDescription` (tool): Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name
- `base_tableAffinity` (tool): Get tables commonly used together by database users, this is helpful to infer relationships between tables via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): Obj Name
- `base_tableDDL` (tool): Displays the DDL definition of a table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `table_name` (string, required): table name
- `base_tableList` (tool): Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name
- `base_tablePreview` (tool): This function returns data sample and inferred structure from a database table or view via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `table_name` (string, required): table or view name
    - `database_name` (string, optional): Database name
- `base_tableUsage` (tool): Measure the usage of a table and views by users in a given schema, this is helpful to infer what database objects are most actively used or drive most value via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, optional): Database name
--- Category: Utilities ---
- `evs_similarity_search` (tool): Enterprise Vector Store similarity search
  - Arguments:
    - `question` (string, required): the query string to search for
    - `top_k` (integer, optional): number of top results to return
- `base_readQuery` (tool): Execute a SQL query via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `sql` (string, optional): SQL text, with optional bind-parameter placeholders
- `tmpl_nameOfTool` (tool): <description of what the tool is for>
  - Arguments:
    - `argument` (string, required): Argument
- `rag_executeWorkflow` (tool): Execute complete RAG workflow to answer user questions based on document context.


This function handles the entire RAG pipeline:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Generate query embeddings (tokenization + embedding)
4. Perform semantic search against chunk embeddings
5. Return retrieved context chunks for answer generation

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided)
- `rag_executeWorkflow_ivsm` (tool): Execute complete RAG workflow to answer user questions based on document context.

This function handles the entire RAG pipeline using IVSM functions:
1. Configuration setup (using configurable values from rag_config.yml)
2. Store user query (with /rag prefix stripping)
3. Tokenize query using ivsm.tokenizer_encode
4. Create embedding view using ivsm.IVSM_score
5. Convert embeddings to vector columns using ivsm.vector_to_columns
6. Perform semantic search against chunk embeddings

The function uses configuration values from rag_config.yml with fallback defaults.
  - Arguments:
    - `question` (string, required): user question to process
    - `k` (integer, optional): number of top-k results to return (optional, uses config default if not provided
- `viz_createChart` (tool): Generates a data visualization based on provided data. You must specify the chart type and map the data fields to the appropriate visual roles.
  - Arguments:
    - `chart_type` (string, required): The type of chart to generate (e.g., 'bar', 'pie', 'line', 'scatter'). This MUST be one of the types listed in the 'Charting Guidelines'.
    - `data` (list[dict], required): The data to be visualized, passed directly from the output of another tool.
    - `title` (string, required): A descriptive title for the chart.
    - `mapping` (dict, required): A dictionary that maps data keys to chart axes or roles (e.g., {'x_axis': 'product_name', 'y_axis': 'sales_total'}). The required keys for this mapping depend on the selected chart_type.
- `util_getCurrentDate` (tool): Returns the current system date in YYYY-MM-DD format. Use this as the first step for any user query involving relative dates like 'today', 'yesterday', or 'this week'.
- `util_calculateDateRange` (tool): Calculates a list of dates based on a start date and a natural language phrase (e.g., 'past 3 days', 'last week'). This is a necessary second step for multi-day queries.
  - Arguments:
    - `start_date` (string, required): The anchor date for the calculation, usually today's date from `util_getCurrentDate`. Must be in YYYY-MM-DD format.
    - `date_phrase` (string, required): The natural language phrase describing the desired range (e.g., 'past 3 days', 'last 2 weeks').
- `CoreLLMTask` (tool): Performs internal, LLM-driven tasks that are not direct calls to the Teradata database. This tool is used for text synthesis, summarization, and formatting based on a specific 'task_description' provided by the LLM itself.
  - Arguments:
    - `task_description` (string, required): A natural language description of the internal task to be executed (e.g., 'describe the table in a business context', 'format final output'). The LLM infers this from the workflow plan.
    - `source_data` (list[string], required): A list of keys (e.g., 'result_of_phase_1') identifying which data from the workflow history is relevant for this task. This is critical for providing the correct context.
--- Available Prompts ---
--- Category: Table Management ---
- `base_tableBusinessDesc` (prompt): You are a Teradata DBA who is an expert in describing the business use of tables in a database.
  - Arguments:
    - `database_name` (str, required): Database for the table to describe.
    - `table_name` (str, required): Table to describe.
--- Category: Utilities ---
- `base_query` (prompt): Help users interact with  Teradata databases effectively.
  - Arguments:
    - `query` (str, required): The problem or question that needs to be solved using Teradata database tools.


USER PROMPT:

You are an expert strategic planning assistant. Your task is to analyze a user's request or a complex workflow goal and decompose it into a high-level, phased meta-plan. This plan will serve as a state machine executor.

--- GOAL ---
what is the business specification for equipment?

--- CONTEXT ---
- User's Original Question (for reference): what is the business specification for equipment?
- Workflow History (Actions taken so far): []
- Known Entities (Key information discovered so far): {
  "database_name": "DEMO_Customer360_db",
  "table_name": "CallCenter",
  "obj_name": "CallCenter",
  "column_name": "GENDER"
}
- Current Execution Depth: 0 (Max is 5)

--- INSTRUCTIONS ---
1.  **Analyze the Goal and Context**: Carefully read the "GOAL" and review the "CONTEXT" section to understand the user's full intent and what has already been established.
2.  **CRITICAL RULE (Contextual Prioritization):** You **MUST** prioritize entities from the user's current `GOAL` over conflicting information in `Known Entities`. The `Known Entities` memory is only for supplementing the `GOAL` (e.g., filling in a missing `database_name`), not for overriding it.

    **Example of Correct Prioritization:**
    * If the `GOAL` is "analyze quality of **'equipment'**".
    * And `Known Entities` contains `{"table_name": "CallCenter"}`.
    * You **MUST** create a plan to analyze the **"equipment"** table. You **MUST NOT** use the stale "CallCenter" entity from memory.
3.  **Decompose into Phases**: Break down the overall goal into a sequence of logical phases. Each phase should represent a major step.
4.  **Define Each Phase**: For each phase, create a JSON object with the following keys:
    -   `"phase"`: An integer representing the step number (e.g., 1, 2, 3).
    -   `"goal"`: A clear, concise, and actionable description of what must be accomplished in this phase.
    -   To specify the action, you MUST use ONE of the following keys:
        -   `"relevant_tools"`: A list of `(tool)` names permitted for this phase.
        -   `"executable_prompt"`: The name of a single `(prompt)` to execute for this phase.
    -   (Optional) `"arguments"`: If executing a prompt, provide any known arguments for it here.
    -   (Optional) `"type": "loop"`: If a phase requires iterating over a list of items, you MUST include this key.
    -   (Optional) `"loop_over"`: If `"type"` is `"loop"`, specify the data source for the iteration (e.g., `"result_of_phase_1"`).
5.  **Embed Parameters**: When defining the `"goal"` for a phase, you MUST scan the main "GOAL" for any hardcoded arguments or parameters (e.g., table names, database names) relevant to that phase's task. You MUST embed these found parameters directly into the `"goal"` string to make it self-contained and explicit.
6.  **Final Synthesis and Formatting Phase**: If the main "GOAL" describes a multi-step process that requires a final summary or a specifically formatted report, your plan **MUST** conclude with a single, final phase. This phase **MUST** use the `CoreLLMTask` tool. Crucially, the `task_description` for this `CoreLLMTask` **MUST** be the complete and verbatim text of the main "GOAL" itself. This ensures that all original context and formatting instructions are passed to the final synthesis step.
7.  **CRITICAL RULE (Simplicity)**: If the "GOAL" is a simple, direct request that can be answered with a single tool call or a single prompt execution, your plan **MUST** consist of only a single phase that calls the one most appropriate capability. Do not add unnecessary synthesis phases for simple data retrieval.
8.  **CRITICAL RULE (Execution Focus)**: Every phase you define **MUST** correspond to a concrete, tool-based action or a prompt execution. You **MUST NOT** create phases for simple verification, confirmation, or acknowledgement of known information. Your plan must focus only on the execution steps required to gather new information or process existing data.
9.  **CRITICAL RULE (Recursion Prevention)**: Review the `Current Execution Depth`. You MUST NOT create a plan that calls an `executable_prompt` if the depth is approaching the maximum of 5, as this may cause an infinite loop. Also, if the "CONTEXT" section indicates you are already inside an `Active Prompt`, you **MUST NOT** create a plan that calls that same prompt again via `executable_prompt`.
10. **CRITICAL RULE (Efficiency)**: If a phase's `"goal"` already contains all the instructions for the final synthesis and formatting of the report (as specified in the main "GOAL"), you **MUST** make this the last phase of the plan. Do not add a separate, redundant formatting-only phase after it.
11. **CRITICAL RULE (Plan Flattening)**: Your plan **MUST ALWAYS** be a flat, sequential list of phases. You **MUST NOT** create nested loops or structures. To handle requests that imply nested logic (e.g., "for each X, do Y for each Z"), you **MUST** decompose the task into multiple, sequential looping phases. The first phase gathers and flattens all the items from the nested level, and subsequent phases iterate over that single flattened list.

--- EXAMPLE (Flattening Nested Logic) ---
- **User Goal**: "For each database on the system, get the DDL for all of its tables."
- **Thought Process**: This requires a nested loop (databases -> tables). I must flatten this into two sequential phases.
- **Correct Plan**:
```json
[
  {
    "phase": 1,
    "goal": "First, get a list of all databases. Then, loop over each database to get its tables, collecting all table names into a single flat list for the next phase.",
    "type": "loop",
    "loop_over": "result_of_phase_0",
    "relevant_tools": ["base_listTables"]
  },
  {
    "phase": 2,
    "goal": "Now, loop over the flattened list of table names gathered in Phase 1 and get the DDL for each one.",
    "type": "loop",
    "loop_over": "result_of_phase_1",
    "relevant_tools": ["base_tableDDL"]
  }
]
```

Your response MUST be a single, valid JSON list of phase objects. Do NOT add any extra text, conversation, or markdown.

[model]: ```json
[
  {
    "phase": 1,
    "goal": "Find the database and table containing the business specification for 'equipment'.",
    "relevant_tools": [
      "base_tableList",
      "base_columnDescription"
    ]
  },
  {
    "phase": 2,
    "goal": "Describe the business purpose of the 'equipment' table, assuming it exists.",
    "executable_prompt": "base_tableBusinessDesc",
    "arguments": {}
  }
]
```
[user]: SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what is the business specification for equipment?

--- CURRENT PHASE GOAL ---
Find the database and table containing the business specification for 'equipment'.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Tool: `base_tableList`
  - Description: Lists all tables in a database.
  - Arguments:
    - `database_name` (string, optional): Database name

- Tool: `base_columnDescription`
  - Description: Shows detailed column information about a database table via SQLAlchemy, bind parameters if provided (prepared SQL), and return the fully rendered SQL (with literals) in metadata.
  - Arguments:
    - `database_name` (string, required): Database name
    - `obj_name` (string, required): table or view name

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: []
- Data Collected So Far: {}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.
[model]: ```json
{"tool_name": "base_tableList", "arguments": {}}
```

--- Current User Prompt (with System Prompt) ---
SYSTEM PROMPT:

You are a tactical assistant executing a single phase of a larger plan. Your task is to decide the single best next action to take to achieve the current phase's goal, strictly adhering to the provided tool constraints.

--- OVERALL WORKFLOW GOAL ---
what is the business specification for equipment?

--- CURRENT PHASE GOAL ---
Describe the business purpose of the 'equipment' table, assuming it exists.

--- CONSTRAINTS ---
- Permitted Tools for this Phase (You MUST use the exact argument names provided):

- Previous Attempt (if any): None

--- WORKFLOW STATE & HISTORY ---
- Actions Taken So Far: [
  {
    "action": {
      "tool_name": "base_tableList",
      "arguments": {}
    },
    "result": {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 1023
      },
      "results": [
        {
          "TableName": "RI_Distinct_ChildrenVX"
        },
        {
          "TableName": "TWMS_Normal"
        },
        {
          "TableName": "ShowColChecks_SZ"
        },
        {
          "TableName": "ResSpmaView"
        },
        {
          "TableName": "View_XUserRoles2"
        },
        {
          "TableName": "PsfGlobalStates"
        },
        {
          "TableName": "CleanupQCFVer"
        },
        {
          "TableName": "COLUMNSJQVX"
        },
        {
          "TableName": "BAR_Tables2V_SZ"
        },
        {
          "TableName": "DBQLRulesV"
        },
        {
          "TableName": "DBQLUtilityTbl"
        },
        {
          "TableName": "ReconfigRedistOrderV"
        },
        {
          "TableName": "TempTableStatsV"
        },
        {
          "TableName": "MapListsV"
        },
        {
          "TableName": "CharTranslationsV"
        },
        {
          "TableName": "AMPUsageX"
        },
        {
          "TableName": "TableConstraints_TD16"
        },
        {
          "TableName": "Migration"
        },
        {
          "TableName": "DBQLRuleTbl_TD15"
        },
        {
          "TableName": "AnalysisLog"
        },
        {
          "TableName": "ColumnsX"
        },
        {
          "TableName": "CALENDAR_TD1310"
        },
        {
          "TableName": "Events_Media"
        },
        {
          "TableName": "UIFDependency"
        },
        {
          "TableName": "QryLogXMLV"
        },
        {
          "TableName": "Databases2_SZ"
        },
        {
          "TableName": "checking_acct"
        },
        {
          "TableName": "GT_TblQryStats"
        },
        {
          "TableName": "test2"
        },
        {
          "TableName": "JARS"
        },
        {
          "TableName": "QueryStatUseCountV_SZ"
        },
        {
          "TableName": "QryLogEventHis"
        },
        {
          "TableName": "DEMO_Customer360_Equipment"
        },
        {
          "TableName": "QueryStatUseCountVX"
        },
        {
          "TableName": "DiskSpaceVX"
        },
        {
          "TableName": "View_3OR"
        },
        {
          "TableName": "CALDATES"
        },
        {
          "TableName": "RoleInfoV"
        },
        {
          "TableName": "ZoneGuestsV_SZ"
        },
        {
          "TableName": "SessionInfo_SZ"
        },
        {
          "TableName": "Parents"
        },
        {
          "TableName": "JoinIndicesV_SZ"
        },
        {
          "TableName": "RI_Child_TablesVX"
        },
        {
          "TableName": "CleanupQCF"
        },
        {
          "TableName": "MapListEntry"
        },
        {
          "TableName": "COLUMNSQVX"
        },
        {
          "TableName": "ExportWidth"
        },
        {
          "TableName": "PartitioningConstraintsV"
        },
        {
          "TableName": "UDTInfo_TD15"
        },
        {
          "TableName": "UDFInfo"
        },
        {
          "TableName": "GEOMETRY_COLUMNS"
        },
        {
          "TableName": "ConstantDefs"
        },
        {
          "TableName": "UDFInfo_TD16"
        },
        {
          "TableName": "All_RI_ParentsX"
        },
        {
          "TableName": "TextTbl"
        },
        {
          "TableName": "View_XUserRolesBase"
        },
        {
          "TableName": "Database_Default_JournalsX"
        },
        {
          "TableName": "Cookie"
        },
        {
          "TableName": "Databases_SZ"
        },
        {
          "TableName": "Events_Configuration"
        },
        {
          "TableName": "SpaceSettingsTbl"
        },
        {
          "TableName": "QueryStatsV_SZ"
        },
        {
          "TableName": "EventCombos"
        },
        {
          "TableName": "BAR_StatsV_SZ"
        },
        {
          "TableName": "IndicesV_SZ"
        },
        {
          "TableName": "GT_DecidedAction"
        },
        {
          "TableName": "Dyn_LockLog_xsd"
        },
        {
          "TableName": "aoa_byom_models"
        },
        {
          "TableName": "RoleMembers_SZ"
        },
        {
          "TableName": "AccountInfoVX"
        },
        {
          "TableName": "StatUseCountVX"
        },
        {
          "TableName": "StatsVX"
        },
        {
          "TableName": "QryLogSQLV"
        },
        {
          "TableName": "QryLogTdwmSum"
        },
        {
          "TableName": "RuleDefs"
        },
        {
          "TableName": "DBQLRuleTbl"
        },
        {
          "TableName": "DBQLAutoDBATbl"
        },
        {
          "TableName": "VPartitions"
        },
        {
          "TableName": "UserRoleRightsV"
        },
        {
          "TableName": "StatsRecs"
        },
        {
          "TableName": "NetSecPolicyLogRuleTbl"
        },
        {
          "TableName": "ConnectRules_SZ"
        },
        {
          "TableName": "DBQLParamTbl"
        },
        {
          "TableName": "User_Default_JournalsX"
        },
        {
          "TableName": "AllRightsX"
        },
        {
          "TableName": "GT_Error_Tables"
        },
        {
          "TableName": "View_2OR"
        },
        {
          "TableName": "TD_FILTERFACTORY1D_TMP_TABLE"
        },
        {
          "TableName": "RCC_Configuration"
        },
        {
          "TableName": "AllRoleRightsV"
        },
        {
          "TableName": "customer_dqa"
        },
        {
          "TableName": "ZonesV_SZ"
        },
        {
          "TableName": "BAR_JoinIndicesV_SZ"
        },
        {
          "TableName": "DBQLSqlTbl_TD15"
        },
        {
          "TableName": "COLUMNSJQV"
        },
        {
          "TableName": "InsertUseCountV_SZ"
        },
        {
          "TableName": "AnalyzeSPInstanceTbl"
        },
        {
          "TableName": "ownerdb"
        },
        {
          "TableName": "DBQLQERTbl"
        },
        {
          "TableName": "SecurityLog_SZ"
        },
        {
          "TableName": "InsertUseCountV"
        },
        {
          "TableName": "COLUMNSQV"
        },
        {
          "TableName": "QryLogXMLV_SZ"
        },
        {
          "TableName": "RepTablesVX"
        },
        {
          "TableName": "JournalsX"
        },
        {
          "TableName": "HostsInfoV"
        },
        {
          "TableName": "All"
        },
        {
          "TableName": "QryLogExplainV"
        },
        {
          "TableName": "MapsV"
        },
        {
          "TableName": "QRYLogXMLDocV_SZ"
        },
        {
          "TableName": "DBSRetryableErrors"
        },
        {
          "TableName": "IndexConstraintsV"
        },
        {
          "TableName": "View_2ORV"
        },
        {
          "TableName": "AlertRequest"
        },
        {
          "TableName": "IndicesVX"
        },
        {
          "TableName": "Indexes_TD15"
        },
        {
          "TableName": "AsgdSecConstraints"
        },
        {
          "TableName": "Predicate_Field"
        },
        {
          "TableName": "QryLogEvents"
        },
        {
          "TableName": "All_RI_ChildrenX"
        },
        {
          "TableName": "ExclusionListsVX"
        },
        {
          "TableName": "ColumnsVX"
        },
        {
          "TableName": "Owners"
        },
        {
          "TableName": "RCC_Media"
        },
        {
          "TableName": "accounts"
        },
        {
          "TableName": "QryLogExceptions"
        },
        {
          "TableName": "RscPartitions"
        },
        {
          "TableName": "RepBatchStatus"
        },
        {
          "TableName": "ObjectUseCountVX"
        },
        {
          "TableName": "BusinessCalendarPatterns"
        },
        {
          "TableName": "PartitioningConstraintsVX"
        },
        {
          "TableName": "BAR_RI_Distinct_ParentsV_SZ"
        },
        {
          "TableName": "AllRightsV"
        },
        {
          "TableName": "Translation"
        },
        {
          "TableName": "Columns_SZ"
        },
        {
          "TableName": "Relation"
        },
        {
          "TableName": "CallCenter"
        },
        {
          "TableName": "DEMO_DigitalEvents_Retail_Events"
        },
        {
          "TableName": "DBQLXMLTbl_TD15"
        },
        {
          "TableName": "IndexUseCountVX"
        },
        {
          "TableName": "ROUTINE_JAR_USAGE"
        },
        {
          "TableName": "UsrAsgdSecConstraintsV_SZ"
        },
        {
          "TableName": "userdb"
        },
        {
          "TableName": "StatsV"
        },
        {
          "TableName": "ddl"
        },
        {
          "TableName": "TransientJournal"
        },
        {
          "TableName": "RoleInfo_SZ"
        },
        {
          "TableName": "Equipment"
        },
        {
          "TableName": "IndexStatsV_SZ"
        },
        {
          "TableName": "IndexUseCountV_SZ"
        },
        {
          "TableName": "WorkerSPInstanceTbl"
        },
        {
          "TableName": "ViewStatsV_SZ"
        },
        {
          "TableName": "DBQLStepTbl"
        },
        {
          "TableName": "IndexConstraintsVX"
        },
        {
          "TableName": "UIF_V"
        },
        {
          "TableName": "View_3ORV"
        },
        {
          "TableName": "Authorizations"
        },
        {
          "TableName": "QryLogSummaryV"
        },
        {
          "TableName": "AssociationV"
        },
        {
          "TableName": "QryLogV_SZ"
        },
        {
          "TableName": "ColumnCorrelation"
        },
        {
          "TableName": "TableText"
        },
        {
          "TableName": "ConnectRulesTbl"
        },
        {
          "TableName": "ColumnUseCountVX"
        },
        {
          "TableName": "QryLogTDWMV_SZ"
        },
        {
          "TableName": "Children_SZ"
        },
        {
          "TableName": "Events"
        },
        {
          "TableName": "RoleMembersV"
        },
        {
          "TableName": "Database_Default_JournalsVX"
        },
        {
          "TableName": "Actions"
        },
        {
          "TableName": "CostProfiles"
        },
        {
          "TableName": "RuleBypass"
        },
        {
          "TableName": "RI_Distinct_Parents_SZ"
        },
        {
          "TableName": "RuleStateValues"
        },
        {
          "TableName": "QryLogUtilityV_SZ"
        },
        {
          "TableName": "JARS"
        },
        {
          "TableName": "RscPartStates"
        },
        {
          "TableName": "User_Default_JournalsVX"
        },
        {
          "TableName": "BAR_Databases2V_SZ"
        },
        {
          "TableName": "Digital_Retail_Events"
        },
        {
          "TableName": "demddl"
        },
        {
          "TableName": "DBQLObjTbl_TD15"
        },
        {
          "TableName": "ROUTINE_JAR_USAGE"
        },
        {
          "TableName": "QueryStatsTbl"
        },
        {
          "TableName": "InDoubtLogV"
        },
        {
          "TableName": "Triggers"
        },
        {
          "TableName": "SeqNumber"
        },
        {
          "TableName": "BAR_ArchiveLoggingObjsV"
        },
        {
          "TableName": "BusinessCalendar"
        },
        {
          "TableName": "RI_Parent_Tables_SZ"
        },
        {
          "TableName": "DeleteUseCountV"
        },
        {
          "TableName": "TableToSparseMapSizingV"
        },
        {
          "TableName": "TableConstraints_TD15"
        },
        {
          "TableName": "DeleteOldInDoubtV"
        },
        {
          "TableName": "UDTTransform"
        },
        {
          "TableName": "BAR_ChildrenV_SZ"
        },
        {
          "TableName": "QueryStatUseCountV"
        },
        {
          "TableName": "EventLog_TD15"
        },
        {
          "TableName": "DBQLRules"
        },
        {
          "TableName": "UpdateUseCountV"
        },
        {
          "TableName": "DBQLStepTbl_TD15"
        },
        {
          "TableName": "FastLog"
        },
        {
          "TableName": "DatabasesX"
        },
        {
          "TableName": "UDTInfo"
        },
        {
          "TableName": "Tables2"
        },
        {
          "TableName": "Children"
        },
        {
          "TableName": "User_Default_JournalsV_SZ"
        },
        {
          "TableName": "JAR_JAR_USAGE"
        },
        {
          "TableName": "LoadTablesInfoVX"
        },
        {
          "TableName": "RangePartExpr"
        },
        {
          "TableName": "Global"
        },
        {
          "TableName": "AllTempTables"
        },
        {
          "TableName": "QryLogStepsV_SZ"
        },
        {
          "TableName": "QryLogExplain"
        },
        {
          "TableName": "AuthorizationsVX"
        },
        {
          "TableName": "IndexConstraintsV_SZ"
        },
        {
          "TableName": "ErrorTblsVX"
        },
        {
          "TableName": "StatsTbl"
        },
        {
          "TableName": "QryLogObjectsV"
        },
        {
          "TableName": "SQLRestrictedWords"
        },
        {
          "TableName": "DBQLSummaryTbl"
        },
        {
          "TableName": "UpdateUseCountV_SZ"
        },
        {
          "TableName": "userdbV"
        },
        {
          "TableName": "QryLogTDWMV"
        },
        {
          "TableName": "QryLogSummary"
        },
        {
          "TableName": "ActionQueueTbl"
        },
        {
          "TableName": "VpOpenvValues"
        },
        {
          "TableName": "DBQLogTbl"
        },
        {
          "TableName": "RepTables"
        },
        {
          "TableName": "FunctionsVX"
        },
        {
          "TableName": "Ownerdb_SZ"
        },
        {
          "TableName": "ExternalSPsX"
        },
        {
          "TableName": "SW_Event_Log"
        },
        {
          "TableName": "ownerdbV"
        },
        {
          "TableName": "DatabaseUseCountVX"
        },
        {
          "TableName": "CostProfileTypes"
        },
        {
          "TableName": "SettingsTbl"
        },
        {
          "TableName": "BAR_ownerdbV_SZ"
        },
        {
          "TableName": "UserGrantedRightsV"
        },
        {
          "TableName": "QryLogSummaryV_SZ"
        },
        {
          "TableName": "CostProfiles_v"
        },
        {
          "TableName": "ARC_SessionInfoVX"
        },
        {
          "TableName": "DBQLExplainTbl_TD15"
        },
        {
          "TableName": "Authorizations_SZ"
        },
        {
          "TableName": "RI_Child_Tables_SZ"
        },
        {
          "TableName": "ExpStatsV_SZ"
        },
        {
          "TableName": "IdCol"
        },
        {
          "TableName": "ObjectListsV"
        },
        {
          "TableName": "TablesVX"
        },
        {
          "TableName": "BAR_MapsV"
        },
        {
          "TableName": "BAR_MapGrantsV"
        },
        {
          "TableName": "JournalsVX"
        },
        {
          "TableName": "AssociationVX"
        },
        {
          "TableName": "QryLogStepsV"
        },
        {
          "TableName": "customer_analysis"
        },
        {
          "TableName": "DBQLXMLLockTbl"
        },
        {
          "TableName": "Indexes"
        },
        {
          "TableName": "DBCAssociation"
        },
        {
          "TableName": "AccLogTbl_TD15"
        },
        {
          "TableName": "UserRightsV"
        },
        {
          "TableName": "Functions"
        },
        {
          "TableName": "DeleteAccessLog"
        },
        {
          "TableName": "SessionInfo"
        },
        {
          "TableName": "QryLogSQL"
        },
        {
          "TableName": "TempTables"
        },
        {
          "TableName": "TempStatistics_TD15"
        },
        {
          "TableName": "QryLogV"
        },
        {
          "TableName": "RepTablesX"
        },
        {
          "TableName": "ArchiveLoggingObjsV_SZ"
        },
        {
          "TableName": "EventComboActions"
        },
        {
          "TableName": "AnalysisStmts"
        },
        {
          "TableName": "CostProfileValues_v"
        },
        {
          "TableName": "All_RI_Parents_SZ"
        },
        {
          "TableName": "QryLogFeatureUseJSON"
        },
        {
          "TableName": "TriggersV_SZ"
        },
        {
          "TableName": "RI_Distinct_Children_SZ"
        },
        {
          "TableName": "CommandsBatchDtlTbl"
        },
        {
          "TableName": "RuleQualifyCriteria"
        },
        {
          "TableName": "ExcludedTbl"
        },
        {
          "TableName": "GT_inplace_join_tables"
        },
        {
          "TableName": "IndexUseCountV"
        },
        {
          "TableName": "DBQLExplainFeed"
        },
        {
          "TableName": "Databases2VX"
        },
        {
          "TableName": "CDS_Exclusions"
        },
        {
          "TableName": "CompatibleTmp"
        },
        {
          "TableName": "WorkloadStatus"
        },
        {
          "TableName": "TriggersV"
        },
        {
          "TableName": "TableConstraints"
        },
        {
          "TableName": "TDWMSummaryLog_TD15"
        },
        {
          "TableName": "Databases2"
        },
        {
          "TableName": "TWMS_ShapiroWilkQuantiles"
        },
        {
          "TableName": "AccessLogV"
        },
        {
          "TableName": "RI_Distinct_Children"
        },
        {
          "TableName": "TempTableStatsV_SZ"
        },
        {
          "TableName": "ISOBCal"
        },
        {
          "TableName": "CALENDAR"
        },
        {
          "TableName": "ResolvedDTS_SZ"
        },
        {
          "TableName": "Shredded_LockTbl"
        },
        {
          "TableName": "ExportWidthV"
        },
        {
          "TableName": "ExternalSPs"
        },
        {
          "TableName": "LogonRulesV"
        },
        {
          "TableName": "AllTempTablesV"
        },
        {
          "TableName": "ErrorTblsV_SZ"
        },
        {
          "TableName": "AuthorizationsV_SZ"
        },
        {
          "TableName": "ArchiveLoggingObjsTbl"
        },
        {
          "TableName": "WlcUtilityMappings"
        },
        {
          "TableName": "CommandsTbl"
        },
        {
          "TableName": "AMPUsage_SZ"
        },
        {
          "TableName": "QryLogSQLDocV_SZ"
        },
        {
          "TableName": "AnalyzeLogTbl"
        },
        {
          "TableName": "BAR_RI_Distinct_ParentsV"
        },
        {
          "TableName": "ExcludedV"
        },
        {
          "TableName": "BAREventsV"
        },
        {
          "TableName": "PeriodsVX"
        },
        {
          "TableName": "TableTextV"
        },
        {
          "TableName": "StatUseCountV"
        },
        {
          "TableName": "QryLogTDWM"
        },
        {
          "TableName": "Workload"
        },
        {
          "TableName": "UDFInfo_TD15"
        },
        {
          "TableName": "AccountInfoV"
        },
        {
          "TableName": "TableTextV_SZ"
        },
        {
          "TableName": "IndicesV"
        },
        {
          "TableName": "last_monitor"
        },
        {
          "TableName": "DBQLogTbl_TD15"
        },
        {
          "TableName": "CommandsListTbl"
        },
        {
          "TableName": "QryLogObjects"
        },
        {
          "TableName": "SecurityLog"
        },
        {
          "TableName": "t10"
        },
        {
          "TableName": "All_RI_ParentsVX"
        },
        {
          "TableName": "DiskSpaceV_SZ"
        },
        {
          "TableName": "QryLogParamJSON"
        },
        {
          "TableName": "AccLogRulesV"
        },
        {
          "TableName": "EndOfGroupQueueTbl"
        },
        {
          "TableName": "MultiExpStatsVX"
        },
        {
          "TableName": "ErrorTblsV"
        },
        {
          "TableName": "QryLogSQLV_SZ"
        },
        {
          "TableName": "All_RI_ParentsV_SZ"
        },
        {
          "TableName": "ZoneGuests"
        },
        {
          "TableName": "DatasetSchemaInfo"
        },
        {
          "TableName": "servercontrolsem"
        },
        {
          "TableName": "ObjectUseCountV"
        },
        {
          "TableName": "AllSpace"
        },
        {
          "TableName": "ProfileInfo"
        },
        {
          "TableName": "SessionTbl"
        },
        {
          "TableName": "ServerInfo"
        },
        {
          "TableName": "AMPUsageV_SZ"
        },
        {
          "TableName": "CostProfileTypes_v"
        },
        {
          "TableName": "Table_LevelConstraintsV_SZ"
        },
        {
          "TableName": "DeleteAccessLogV_SZ"
        },
        {
          "TableName": "CommandsBatchDtlHistoryTbl"
        },
        {
          "TableName": "TablesX"
        },
        {
          "TableName": "SingleRowRelation"
        },
        {
          "TableName": "BAR_StatsVX"
        },
        {
          "TableName": "DatabasesVX"
        },
        {
          "TableName": "Profiles"
        },
        {
          "TableName": "ActionHistoryV"
        },
        {
          "TableName": "MultiColumnStatsVX"
        },
        {
          "TableName": "ColumnUseCountV"
        },
        {
          "TableName": "Tables2V"
        },
        {
          "TableName": "pima_patient_predictions"
        },
        {
          "TableName": "DiskSpace"
        },
        {
          "TableName": "TDWMGlobalRulesV"
        },
        {
          "TableName": "TableTextX"
        },
        {
          "TableName": "TWMS_ShapiroWilkCoefficients"
        },
        {
          "TableName": "GT_Ranked_Tables"
        },
        {
          "TableName": "ObjectListTbl"
        },
        {
          "TableName": "RCMedia"
        },
        {
          "TableName": "CommandsHistoryTbl"
        },
        {
          "TableName": "TWMS_KolmogorovSmirnov"
        },
        {
          "TableName": "RestrictedWords"
        },
        {
          "TableName": "All_RI_Children_SZ"
        },
        {
          "TableName": "AllocGroups"
        },
        {
          "TableName": "dbcstatsv"
        },
        {
          "TableName": "TempUDTXFORM"
        },
        {
          "TableName": "ResolvedDTSVX"
        },
        {
          "TableName": "AMPUsageVX"
        },
        {
          "TableName": "QRYLogXMLDocV"
        },
        {
          "TableName": "MultiExpStatsV"
        },
        {
          "TableName": "QuerySteps"
        },
        {
          "TableName": "LogonRuleTbl"
        },
        {
          "TableName": "AllocGroupStates"
        },
        {
          "TableName": "AllSpace_SZ"
        },
        {
          "TableName": "Digital_Retail_Events"
        },
        {
          "TableName": "RepGroup"
        },
        {
          "TableName": "WlcOpenvValues"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsVX"
        },
        {
          "TableName": "ColumnsV"
        },
        {
          "TableName": "All_RI_Children"
        },
        {
          "TableName": "dbcindexesv"
        },
        {
          "TableName": "User_Default_JournalsV"
        },
        {
          "TableName": "UIF_Info"
        },
        {
          "TableName": "DBCInfoTbl"
        },
        {
          "TableName": "FunctionAliasVX"
        },
        {
          "TableName": "IndexTable"
        },
        {
          "TableName": "DeleteUseCountV_SZ"
        },
        {
          "TableName": "View_UserDBsExtVX"
        },
        {
          "TableName": "RCEvent"
        },
        {
          "TableName": "RI_Child_Tables"
        },
        {
          "TableName": "QryLogTDWM_SZ"
        },
        {
          "TableName": "TVFields"
        },
        {
          "TableName": "ResUsageSps"
        },
        {
          "TableName": "MapListsVX"
        },
        {
          "TableName": "DEMO_Customer360_CallCenter"
        },
        {
          "TableName": "RoleInfoX"
        },
        {
          "TableName": "TDWMEventHistory"
        },
        {
          "TableName": "RecoveryPJTable"
        },
        {
          "TableName": "TWMS_ChiSquare"
        },
        {
          "TableName": "SysSecDefaults"
        },
        {
          "TableName": "TriggersX"
        },
        {
          "TableName": "FunctionAliasInfoV"
        },
        {
          "TableName": "FunctionAliasInfoVX"
        },
        {
          "TableName": "TableSize"
        },
        {
          "TableName": "Database_Default_JournalsV_SZ"
        },
        {
          "TableName": "Dbase"
        },
        {
          "TableName": "AMPUsageV"
        },
        {
          "TableName": "QryLogSteps"
        },
        {
          "TableName": "BAR_ChildrenV"
        },
        {
          "TableName": "QryLogParamJSON_SZ"
        },
        {
          "TableName": "Zones_TD15"
        },
        {
          "TableName": "QryLogSummary_SZ"
        },
        {
          "TableName": "UDTTransformV"
        },
        {
          "TableName": "AllGlobalSpaceV"
        },
        {
          "TableName": "QryLogParamV_SZ"
        },
        {
          "TableName": "View_UserTablesExtVX"
        },
        {
          "TableName": "DBQLAmpDataTbl"
        },
        {
          "TableName": "DBCInfo"
        },
        {
          "TableName": "customer"
        },
        {
          "TableName": "Software_Event_LogV"
        },
        {
          "TableName": "SecConstraints"
        },
        {
          "TableName": "AllRightsVX"
        },
        {
          "TableName": "StatsTbl"
        },
        {
          "TableName": "DBQLXMLLockTbl_TD15"
        },
        {
          "TableName": "RoleInfo"
        },
        {
          "TableName": "ProfileInfoX"
        },
        {
          "TableName": "AllGlobalSpaceVX"
        },
        {
          "TableName": "Databases2V"
        },
        {
          "TableName": "BusinessCalendarExceptions"
        },
        {
          "TableName": "AllRights_SZ"
        },
        {
          "TableName": "SecurityDefaults"
        },
        {
          "TableName": "RoleMembersX"
        },
        {
          "TableName": "AllRoleRightsV_SZ"
        },
        {
          "TableName": "ForeignTablesV"
        },
        {
          "TableName": "TablesV_SZ"
        },
        {
          "TableName": "ErrorTbls"
        },
        {
          "TableName": "METADATA_OBJECTS"
        },
        {
          "TableName": "AutomateHistoryTbl"
        },
        {
          "TableName": "All_RI_ChildrenVX"
        },
        {
          "TableName": "All_RI_ChildrenV_SZ"
        },
        {
          "TableName": "GlobalDBSpaceV"
        },
        {
          "TableName": "JournalsV"
        },
        {
          "TableName": "WlcPerfGroupMappings"
        },
        {
          "TableName": "ForeignTablesInfoV"
        },
        {
          "TableName": "RepTablesV"
        },
        {
          "TableName": "BusinessCalendarPattern"
        },
        {
          "TableName": "CDS_PercentData"
        },
        {
          "TableName": "DatabaseUseCountV"
        },
        {
          "TableName": "TDWMEventLog"
        },
        {
          "TableName": "All_RI_Parents"
        },
        {
          "TableName": "AllRoleRights_SZ"
        },
        {
          "TableName": "TDWMSummaryLog_TD16"
        },
        {
          "TableName": "CharSets"
        },
        {
          "TableName": "DEFAULTSESSIONATTRIBUTES"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsV"
        },
        {
          "TableName": "QryLog"
        },
        {
          "TableName": "CDSTableSizeV"
        },
        {
          "TableName": "IndexColumns"
        },
        {
          "TableName": "Database_Default_JournalsV"
        },
        {
          "TableName": "TableStatsV_SZ"
        },
        {
          "TableName": "JoinIndicesV"
        },
        {
          "TableName": "QryLogSQL_SZ"
        },
        {
          "TableName": "BusinessCalendarException"
        },
        {
          "TableName": "DBQLRulesV_SZ"
        },
        {
          "TableName": "Configurations"
        },
        {
          "TableName": "AnalyzerHistoryTbl"
        },
        {
          "TableName": "HelpSyntax"
        },
        {
          "TableName": "QryLogSteps_SZ"
        },
        {
          "TableName": "AccLogRules_SZ"
        },
        {
          "TableName": "ResolvedDTSV"
        },
        {
          "TableName": "WorkloadQueries"
        },
        {
          "TableName": "BAR_StatsV"
        },
        {
          "TableName": "Shredded_TransTbl"
        },
        {
          "TableName": "RI_Distinct_ChildrenV"
        },
        {
          "TableName": "RI_Distinct_Parents"
        },
        {
          "TableName": "MultiColumnStatsV"
        },
        {
          "TableName": "TWMS_Normalshort"
        },
        {
          "TableName": "TDWMExceptionLog"
        },
        {
          "TableName": "RecoveryLockTable"
        },
        {
          "TableName": "TVM"
        },
        {
          "TableName": "DatasetSchemaDependenciesV"
        },
        {
          "TableName": "QryLogExceptionsV_SZ"
        },
        {
          "TableName": "GT_ObjectListMap"
        },
        {
          "TableName": "DBQLSummaryTbl_TD15"
        },
        {
          "TableName": "ConstraintFunctionsV"
        },
        {
          "TableName": "TablesV"
        },
        {
          "TableName": "PeriodsV"
        },
        {
          "TableName": "Users"
        },
        {
          "TableName": "DatabasesV"
        },
        {
          "TableName": "Tables2V_SZ"
        },
        {
          "TableName": "QryLogObjectsV_SZ"
        },
        {
          "TableName": "AllSpaceV_SZ"
        },
        {
          "TableName": "Databases2V_SZ"
        },
        {
          "TableName": "DatabaseUseCountV_SZ"
        },
        {
          "TableName": "GlobalDBSpaceVX"
        },
        {
          "TableName": "UsrAsgdSecConstraintsVX"
        },
        {
          "TableName": "QryLogParamV"
        },
        {
          "TableName": "pima_patient_features"
        },
        {
          "TableName": "Collations"
        },
        {
          "TableName": "ExclusionListTbl"
        },
        {
          "TableName": "ArchiveLoggingObjsVX"
        },
        {
          "TableName": "QryLogExplainDocV"
        },
        {
          "TableName": "QryLogSQLDocV"
        },
        {
          "TableName": "TableSizeV_SZ"
        },
        {
          "TableName": "ResUsageSmhm"
        },
        {
          "TableName": "CostConstantsTbl"
        },
        {
          "TableName": "DEMO_Customer360_Online"
        },
        {
          "TableName": "TWMS_Lilliefors"
        },
        {
          "TableName": "DefaultsTbl"
        },
        {
          "TableName": "TableTextVX"
        },
        {
          "TableName": "test001"
        },
        {
          "TableName": "FunctionAliasV"
        },
        {
          "TableName": "Events_MediaX"
        },
        {
          "TableName": "UDTInfoV"
        },
        {
          "TableName": "ExternalSPsVX"
        },
        {
          "TableName": "CallCenter"
        },
        {
          "TableName": "QryLogExplainDocV_SZ"
        },
        {
          "TableName": "TempStatistics"
        },
        {
          "TableName": "GT_StepInfoTbl"
        },
        {
          "TableName": "Online"
        },
        {
          "TableName": "ZoneGuestsVX"
        },
        {
          "TableName": "ResolvedDTSX"
        },
        {
          "TableName": "AllTempTablesX"
        },
        {
          "TableName": "ObjectsInSparseMapsV"
        },
        {
          "TableName": "TableToSparseMapSizingVX"
        },
        {
          "TableName": "ResUsageSvdsk"
        },
        {
          "TableName": "ResUsageSawt"
        },
        {
          "TableName": "UsrAsgdSecConstraintsV"
        },
        {
          "TableName": "SHOWTBLCHECKSX"
        },
        {
          "TableName": "QryLogExplainV_SZ"
        },
        {
          "TableName": "AccountInfo_SZ"
        },
        {
          "TableName": "ManagerSPInstanceTbl"
        },
        {
          "TableName": "InDoubtResLog"
        },
        {
          "TableName": "ResCPUUsageByPEView"
        },
        {
          "TableName": "AnalyzerEvidenceTbl"
        },
        {
          "TableName": "Tables2X"
        },
        {
          "TableName": "TeradataBCal"
        },
        {
          "TableName": "LoadTablesInfoV"
        },
        {
          "TableName": "Table_LevelConstraintsX"
        },
        {
          "TableName": "ReconfigDeleteOrderTbl"
        },
        {
          "TableName": "LogOnOffVX"
        },
        {
          "TableName": "DataBaseSpace_TD15"
        },
        {
          "TableName": "RI_Parent_Tables"
        },
        {
          "TableName": "credit_tran"
        },
        {
          "TableName": "View_XUserOnlyPublicDBs"
        },
        {
          "TableName": "SHOWCOLCHECKS"
        },
        {
          "TableName": "DataDemographics"
        },
        {
          "TableName": "QryLogFeatureListV"
        },
        {
          "TableName": "OnlineJournalInfoTbl"
        },
        {
          "TableName": "QryLogExceptions_SZ"
        },
        {
          "TableName": "QryLogObjects_SZ"
        },
        {
          "TableName": "BAR_JoinIndicesV"
        },
        {
          "TableName": "Table_LevelConstraints"
        },
        {
          "TableName": "QryRelX"
        },
        {
          "TableName": "dempart"
        },
        {
          "TableName": "ActionsV"
        },
        {
          "TableName": "Equipment"
        },
        {
          "TableName": "Events_ConfigurationV"
        },
        {
          "TableName": "BAR_ownerdbV"
        },
        {
          "TableName": "All_RI_ChildrenV"
        },
        {
          "TableName": "Predicate"
        },
        {
          "TableName": "AccLogRuleTbl_TD15"
        },
        {
          "TableName": "QueryList"
        },
        {
          "TableName": "OrdSysChngTable"
        },
        {
          "TableName": "CALENDARTMP"
        },
        {
          "TableName": "AllRoleRights"
        },
        {
          "TableName": "Events_MediaV"
        },
        {
          "TableName": "AccountInfoV_SZ"
        },
        {
          "TableName": "ObjectListsVX"
        },
        {
          "TableName": "DatasetSchemaInfoV"
        },
        {
          "TableName": "ConstraintValues"
        },
        {
          "TableName": "AccessLog_SZ"
        },
        {
          "TableName": "RCC_ConfigurationV"
        },
        {
          "TableName": "RestrictedWordsV"
        },
        {
          "TableName": "QueryBandReservedNames"
        },
        {
          "TableName": "DBQLStepTbl_TD16"
        },
        {
          "TableName": "ConstraintFunctions"
        },
        {
          "TableName": "ShowTblChecksV_SZ"
        },
        {
          "TableName": "UserRoleRights"
        },
        {
          "TableName": "View_XUserDPRSDBs"
        },
        {
          "TableName": "OpEnvs"
        },
        {
          "TableName": "ActualTableSizeV"
        },
        {
          "TableName": "AllRightsV_SZ"
        },
        {
          "TableName": "ObjectUsage"
        },
        {
          "TableName": "ProfileInfoV_SZ"
        },
        {
          "TableName": "RoleMembersVX"
        },
        {
          "TableName": "ProfileInfoV"
        },
        {
          "TableName": "ReconfigRedistOrderTbl"
        },
        {
          "TableName": "TDWMGlobalRulesV"
        },
        {
          "TableName": "RI_Child_TablesV"
        },
        {
          "TableName": "AccLogRuleTbl"
        },
        {
          "TableName": "Query"
        },
        {
          "TableName": "ZonesVX"
        },
        {
          "TableName": "StatsV"
        },
        {
          "TableName": "QueryListEntry"
        },
        {
          "TableName": "IndexConstraints"
        },
        {
          "TableName": "Next"
        },
        {
          "TableName": "ResUsageShst"
        },
        {
          "TableName": "CharTranslations"
        },
        {
          "TableName": "SHOWTBLCHECKS"
        },
        {
          "TableName": "RI_Parent_TablesX"
        },
        {
          "TableName": "SysRcvStatJournal"
        },
        {
          "TableName": "OldPasswords"
        },
        {
          "TableName": "DatabasesV_SZ"
        },
        {
          "TableName": "SessionInfoV_SZ"
        },
        {
          "TableName": "ResSmhmView"
        },
        {
          "TableName": "StatUseCountV_SZ"
        },
        {
          "TableName": "QryLogParam"
        },
        {
          "TableName": "ConstraintFunctionsV_SZ"
        },
        {
          "TableName": "SerialActionQueueTbl"
        },
        {
          "TableName": "WlcExceptCriteria"
        },
        {
          "TableName": "ViewStatsV"
        },
        {
          "TableName": "WlcExceptActions"
        },
        {
          "TableName": "SecConstraintsVX"
        },
        {
          "TableName": "RoleInfoVX"
        },
        {
          "TableName": "ReconfigInfoTbl"
        },
        {
          "TableName": "AllTempTablesVX"
        },
        {
          "TableName": "QryLog_SZ"
        },
        {
          "TableName": "QueryStatsV"
        },
        {
          "TableName": "Events_ConfigurationX"
        },
        {
          "TableName": "IndexStatsV"
        },
        {
          "TableName": "BAR_TablesV"
        },
        {
          "TableName": "MapSimulationV"
        },
        {
          "TableName": "QryLockLogXMLV_SZ"
        },
        {
          "TableName": "GlobalDBSpace"
        },
        {
          "TableName": "TVM_TD15"
        },
        {
          "TableName": "ResUsageSpdsk"
        },
        {
          "TableName": "AccLogRulesV_SZ"
        },
        {
          "TableName": "RCC_ConfigurationX"
        },
        {
          "TableName": "AllRights"
        },
        {
          "TableName": "SpaceExcludeDBListTbl"
        },
        {
          "TableName": "ZoneGuestsV"
        },
        {
          "TableName": "DBQLXMLStatsUsageFeed"
        },
        {
          "TableName": "RepGroupTables"
        },
        {
          "TableName": "ResCPUUsageByAMPView"
        },
        {
          "TableName": "DBQLogTbl_TD16"
        },
        {
          "TableName": "SettingsV"
        },
        {
          "TableName": "AccessLogV_SZ"
        },
        {
          "TableName": "ConstraintValuesV"
        },
        {
          "TableName": "SHOWCOLCHECKSX"
        },
        {
          "TableName": "TD_PushProfileInfo"
        },
        {
          "TableName": "GT_ranked_join_tables"
        },
        {
          "TableName": "QryLogExplain_SZ"
        },
        {
          "TableName": "HostsInfo"
        },
        {
          "TableName": "ZonesV"
        },
        {
          "TableName": "DBCInfoV"
        },
        {
          "TableName": "XMLQCD"
        },
        {
          "TableName": "ConstraintValuesV_SZ"
        },
        {
          "TableName": "DebugTraceTbl"
        },
        {
          "TableName": "PersistentSpoolTables"
        },
        {
          "TableName": "BAR_FunctionsV"
        },
        {
          "TableName": "ServerInfoVX"
        },
        {
          "TableName": "LogonRules_SZ"
        },
        {
          "TableName": "Association"
        },
        {
          "TableName": "ArchiveLoggingObjsV"
        },
        {
          "TableName": "ProfileInfoVX"
        },
        {
          "TableName": "IndexRecommendations"
        },
        {
          "TableName": "Index_Field"
        },
        {
          "TableName": "RCC_MediaV"
        },
        {
          "TableName": "IndexStatsVX"
        },
        {
          "TableName": "TblSrvInfoVX"
        },
        {
          "TableName": "All_RI_ParentsV"
        },
        {
          "TableName": "TVFields_TD15"
        },
        {
          "TableName": "EventLog_TD16"
        },
        {
          "TableName": "ChildrenV"
        },
        {
          "TableName": "ResUsageIvpr"
        },
        {
          "TableName": "RoleMembers"
        },
        {
          "TableName": "RCC_MediaX"
        },
        {
          "TableName": "UserRights"
        },
        {
          "TableName": "CALENDAR_TD_ISO_COMPATIBLE"
        },
        {
          "TableName": "transactions"
        },
        {
          "TableName": "ObjectList"
        },
        {
          "TableName": "DBQLXMLFeed"
        },
        {
          "TableName": "UtilityLockJournalTable"
        },
        {
          "TableName": "SecurityDefaultsV"
        },
        {
          "TableName": "LogOnOffV"
        },
        {
          "TableName": "MapGrantsV"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsV_SZ"
        },
        {
          "TableName": "SequenceNumber"
        },
        {
          "TableName": "View_XUserOnlyRoleDBs"
        },
        {
          "TableName": "RI_Distinct_ChildrenX"
        },
        {
          "TableName": "ResSawtView"
        },
        {
          "TableName": "ShowColChecksV_SZ"
        },
        {
          "TableName": "ProfileInfo_SZ"
        },
        {
          "TableName": "RepRulesetTbl"
        },
        {
          "TableName": "RepCaptureRulesV"
        },
        {
          "TableName": "ISOTmp"
        },
        {
          "TableName": "ServerInfoV"
        },
        {
          "TableName": "SecConstraintsV_SZ"
        },
        {
          "TableName": "View_XUserRoleDBs2"
        },
        {
          "TableName": "RI_Distinct_ParentsV"
        },
        {
          "TableName": "EventsV"
        },
        {
          "TableName": "Opt_XMLPlan_Table"
        },
        {
          "TableName": "RI_Distinct_ParentsX"
        },
        {
          "TableName": "ResUsageSldv"
        },
        {
          "TableName": "MapGrantsVX"
        },
        {
          "TableName": "QryLogXMLV"
        },
        {
          "TableName": "SystemQTbl"
        },
        {
          "TableName": "LocalSessionStatusTable"
        },
        {
          "TableName": "QryLogXMLStatsUsageV"
        },
        {
          "TableName": "GlobalParams"
        },
        {
          "TableName": "SecurityLogV_SZ"
        },
        {
          "TableName": "ResSpsView"
        },
        {
          "TableName": "MapListTbl"
        },
        {
          "TableName": "Events_ConfigurationVX"
        },
        {
          "TableName": "Temp_ReconfigSpace"
        },
        {
          "TableName": "SecConstraintsV"
        },
        {
          "TableName": "ResSvdskView"
        },
        {
          "TableName": "SHOWCOLCHECKSV"
        },
        {
          "TableName": "BAR_Tables2V"
        },
        {
          "TableName": "TDWMEventHistory_TD15"
        },
        {
          "TableName": "ActionHistoryVX"
        },
        {
          "TableName": "TWMS_T"
        },
        {
          "TableName": "Events_MediaVX"
        },
        {
          "TableName": "spatial_ref_sys"
        },
        {
          "TableName": "SessionStateTbl"
        },
        {
          "TableName": "Triggers_SZ"
        },
        {
          "TableName": "RI_Parent_TablesV"
        },
        {
          "TableName": "ObjectListEntry"
        },
        {
          "TableName": "ColumnUseCountV_SZ"
        },
        {
          "TableName": "ResSpdskView"
        },
        {
          "TableName": "QryLogV"
        },
        {
          "TableName": "BAR_Databases2V"
        },
        {
          "TableName": "TxnTable"
        },
        {
          "TableName": "Table_LevelConstraintsVX"
        },
        {
          "TableName": "userdb_SZ"
        },
        {
          "TableName": "DBSDataRelatedErrors"
        },
        {
          "TableName": "JoinIndexColumns"
        },
        {
          "TableName": "DBQLRuleCountTbl"
        },
        {
          "TableName": "SpaceLogTbl"
        },
        {
          "TableName": "NetSecPolicyLogTbl"
        },
        {
          "TableName": "AccLogTbl"
        },
        {
          "TableName": "Maps"
        },
        {
          "TableName": "Dbase_TD16"
        },
        {
          "TableName": "UserGrantedRights"
        },
        {
          "TableName": "Roles"
        },
        {
          "TableName": "ColumnStatsV_SZ"
        },
        {
          "TableName": "InDoubtLog"
        },
        {
          "TableName": "User_Default_Journals_SZ"
        },
        {
          "TableName": "ChildrenX"
        },
        {
          "TableName": "TableStatistics"
        },
        {
          "TableName": "CSPSESSIONINFOV"
        },
        {
          "TableName": "Profiles_TD16"
        },
        {
          "TableName": "ResUsageScpu"
        },
        {
          "TableName": "FunctionsV"
        },
        {
          "TableName": "ForeignTablesVX"
        },
        {
          "TableName": "DeleteOldInDoubt"
        },
        {
          "TableName": "AccountInfo"
        },
        {
          "TableName": "Profiles_TD15"
        },
        {
          "TableName": "ExternalSPsV"
        },
        {
          "TableName": "Hosts"
        },
        {
          "TableName": "PartitioningConstraintsV_SZ"
        },
        {
          "TableName": "Indices"
        },
        {
          "TableName": "TriggersTbl"
        },
        {
          "TableName": "ConnectRulesV_SZ"
        },
        {
          "TableName": "QryLogEventHisV"
        },
        {
          "TableName": "UDTCast"
        },
        {
          "TableName": "BAREventsTbl"
        },
        {
          "TableName": "ForeignTablesInfoVX"
        },
        {
          "TableName": "savings_tran"
        },
        {
          "TableName": "opt_cost_table"
        },
        {
          "TableName": "LocalTransactionStatusTable"
        },
        {
          "TableName": "pima_patient_diagnoses"
        },
        {
          "TableName": "RI_Child_TablesX"
        },
        {
          "TableName": "ReconfigJournalTbl"
        },
        {
          "TableName": "View_XRoleDBs2"
        },
        {
          "TableName": "credit_acct"
        },
        {
          "TableName": "RepCaptureRulesTbl"
        },
        {
          "TableName": "RoleInfoV_SZ"
        },
        {
          "TableName": "RequestTbl"
        },
        {
          "TableName": "AuthorizationsV"
        },
        {
          "TableName": "RoleMembersV_SZ"
        },
        {
          "TableName": "QryLogExtAmpDataV"
        },
        {
          "TableName": "TblSrvVX"
        },
        {
          "TableName": "DataBaseSpace_TD16"
        },
        {
          "TableName": "StopMoveQueueTbl"
        },
        {
          "TableName": "Table_LevelConstraintsV"
        },
        {
          "TableName": "SavedTransactionStatusTable"
        },
        {
          "TableName": "EventsX"
        },
        {
          "TableName": "Journals_SZ"
        },
        {
          "TableName": "ResUsageSpma"
        },
        {
          "TableName": "ObjectUseCountV_SZ"
        },
        {
          "TableName": "ResUsageSvpr"
        },
        {
          "TableName": "QryLogExtPeDataV"
        },
        {
          "TableName": "CDSTableSizeV_SZ"
        },
        {
          "TableName": "ResSldvView"
        },
        {
          "TableName": "PeriodsV_SZ"
        },
        {
          "TableName": "WlcExceptions"
        },
        {
          "TableName": "ResShstView"
        },
        {
          "TableName": "QryLogTdwmSumV"
        },
        {
          "TableName": "TriggersVX"
        },
        {
          "TableName": "RCC_MediaVX"
        },
        {
          "TableName": "Tables2VX"
        },
        {
          "TableName": "Maps"
        },
        {
          "TableName": "ConnectRulesV"
        },
        {
          "TableName": "DBQLSqlTbl"
        },
        {
          "TableName": "View_XUserOnlyPublicTVMs"
        },
        {
          "TableName": "AccLogRules"
        },
        {
          "TableName": "View_XUserRoleDBs"
        },
        {
          "TableName": "SecurityLogV"
        },
        {
          "TableName": "IndexConstraintsX"
        },
        {
          "TableName": "GT_Ranked_Tables_Max"
        },
        {
          "TableName": "LogOnOff_SZ"
        },
        {
          "TableName": "SHOWTBLCHECKSV"
        },
        {
          "TableName": "ReconfigTableStatsTbl"
        },
        {
          "TableName": "UserRemarks"
        },
        {
          "TableName": "TblSrvInfoV"
        },
        {
          "TableName": "SessionInfoX"
        },
        {
          "TableName": "ColumnsV_SZ"
        },
        {
          "TableName": "RCC_ConfigurationVX"
        },
        {
          "TableName": "DeleteAccessLogV"
        },
        {
          "TableName": "ResUsageIpma"
        },
        {
          "TableName": "ExpStatsV"
        },
        {
          "TableName": "DBQLObjTbl"
        },
        {
          "TableName": "SysCons"
        },
        {
          "TableName": "Table_LevelConstraints_SZ"
        },
        {
          "TableName": "StateDefs"
        },
        {
          "TableName": "SecurityLogX"
        },
        {
          "TableName": "ObjectListEntry"
        },
        {
          "TableName": "MapsV"
        },
        {
          "TableName": "DBQLUtilityTbl_TD15"
        },
        {
          "TableName": "Columns"
        },
        {
          "TableName": "AnalyzeJobMonitoringEvents"
        },
        {
          "TableName": "Tables3VX"
        },
        {
          "TableName": "User_Default_Journals"
        },
        {
          "TableName": "TD_PushProfileInfoV"
        },
        {
          "TableName": "MapsVX"
        },
        {
          "TableName": "LogOnOffX"
        },
        {
          "TableName": "TableSize_SZ"
        },
        {
          "TableName": "LogonRules"
        },
        {
          "TableName": "MapGrants"
        },
        {
          "TableName": "StatsV_SZ"
        },
        {
          "TableName": "checking_tran"
        },
        {
          "TableName": "IndexConstraints_SZ"
        },
        {
          "TableName": "Opt_DBSCtl_Table"
        },
        {
          "TableName": "Indices_SZ"
        },
        {
          "TableName": "QryLockLogXMLV"
        },
        {
          "TableName": "QryLogAmpDataV"
        },
        {
          "TableName": "AccessLog"
        },
        {
          "TableName": "ExpStatsVX"
        },
        {
          "TableName": "Indexes_TD16"
        },
        {
          "TableName": "ServerVX"
        },
        {
          "TableName": "Dependency"
        },
        {
          "TableName": "LoadTablesInfoTbl"
        },
        {
          "TableName": "LogOnOff"
        },
        {
          "TableName": "TableSizeV"
        },
        {
          "TableName": "CSPSESSIONINFO"
        },
        {
          "TableName": "TableText_SZ"
        },
        {
          "TableName": "GT_join_inputs"
        },
        {
          "TableName": "Opt_Map_Table"
        },
        {
          "TableName": "DEMO_Customer360_Cookie"
        },
        {
          "TableName": "opt_ras_table"
        },
        {
          "TableName": "Field"
        },
        {
          "TableName": "ExclusionListEntry"
        },
        {
          "TableName": "ExclusionListsV"
        },
        {
          "TableName": "SessionInfoVX"
        },
        {
          "TableName": "ColumnStatsVX"
        },
        {
          "TableName": "MultiColumnStatsV_SZ"
        },
        {
          "TableName": "View_XRoleDBs"
        },
        {
          "TableName": "TVFields_TD16"
        },
        {
          "TableName": "ConstraintNames"
        },
        {
          "TableName": "SessionInfoV"
        },
        {
          "TableName": "TblSrvV"
        },
        {
          "TableName": "ActionsTbl"
        },
        {
          "TableName": "MapGrantsV_SZ"
        },
        {
          "TableName": "View_XUserOnlyTVMs"
        },
        {
          "TableName": "AllSpaceV"
        },
        {
          "TableName": "RCConfiguration"
        },
        {
          "TableName": "SHOWCOLCHECKSVX"
        },
        {
          "TableName": "RI_Distinct_ParentsV_SZ"
        },
        {
          "TableName": "MultiExpStatsV_SZ"
        },
        {
          "TableName": "User_Database"
        },
        {
          "TableName": "View_XUserRolePublicTVM"
        },
        {
          "TableName": "Redrive"
        },
        {
          "TableName": "QryLogEventsV"
        },
        {
          "TableName": "PostScriptWorkTbl"
        },
        {
          "TableName": "UserdbV_SZ"
        },
        {
          "TableName": "ChildrenV_SZ"
        },
        {
          "TableName": "RI_Parent_TablesV_SZ"
        },
        {
          "TableName": "ActualTableSizeV_SZ"
        },
        {
          "TableName": "InsertUseCountVX"
        },
        {
          "TableName": "aoa_statistics_metadata"
        },
        {
          "TableName": "TWMS_Binomial"
        },
        {
          "TableName": "ResSvprView"
        },
        {
          "TableName": "DBQLXMLTbl"
        },
        {
          "TableName": "ChildrenVX"
        },
        {
          "TableName": "QueryBandTbl"
        },
        {
          "TableName": "SHOWTBLCHECKSVX"
        },
        {
          "TableName": "LogTbl"
        },
        {
          "TableName": "DBQLUtilityTbl_TD16"
        },
        {
          "TableName": "EventsVX"
        },
        {
          "TableName": "Exceptions"
        },
        {
          "TableName": "ParentChildCorrelation"
        },
        {
          "TableName": "TableSizeX"
        },
        {
          "TableName": "DBQLExplainTbl"
        },
        {
          "TableName": "ServerV"
        },
        {
          "TableName": "LogOnOffV_SZ"
        },
        {
          "TableName": "LogonRulesV_SZ"
        },
        {
          "TableName": "AllSpaceX"
        },
        {
          "TableName": "Opt_MapRel_Table"
        },
        {
          "TableName": "REMOTEQualifiedTable"
        },
        {
          "TableName": "ResIvprView"
        },
        {
          "TableName": "UDTTransform_TD15"
        },
        {
          "TableName": "Database_Default_Journals"
        },
        {
          "TableName": "Software_Event_Log"
        },
        {
          "TableName": "QryLogExceptionsV"
        },
        {
          "TableName": "DataBaseSpace"
        },
        {
          "TableName": "TWMS_F"
        },
        {
          "TableName": "Acctg"
        },
        {
          "TableName": "RanksTbl"
        },
        {
          "TableName": "AuthorizationsX"
        },
        {
          "TableName": "ReconfigInfoV"
        },
        {
          "TableName": "RoleGrants"
        },
        {
          "TableName": "DeleteAccessLog_SZ"
        },
        {
          "TableName": "FastLogRestartV"
        },
        {
          "TableName": "EventLog"
        },
        {
          "TableName": "CreateQCFVer"
        },
        {
          "TableName": "ViewTable"
        },
        {
          "TableName": "DiskSpace_SZ"
        },
        {
          "TableName": "FunctionsX"
        },
        {
          "TableName": "PartitionRecommendations"
        },
        {
          "TableName": "DiskSpaceErrorV"
        },
        {
          "TableName": "JAR_JAR_USAGE"
        },
        {
          "TableName": "ReconfigInfoTbl_TD15"
        },
        {
          "TableName": "AccountInfoX"
        },
        {
          "TableName": "ServerInfo_TD15"
        },
        {
          "TableName": "DiskGlobalSpaceErrorV"
        },
        {
          "TableName": "AMPUsage"
        },
        {
          "TableName": "ReconfigDeleteOrderV"
        },
        {
          "TableName": "Journals"
        },
        {
          "TableName": "ServerTblOpInfo"
        },
        {
          "TableName": "SparseMapAmpsV"
        },
        {
          "TableName": "View_XUserTVMs"
        },
        {
          "TableName": "TeradataTmp"
        },
        {
          "TableName": "ARTColumns"
        },
        {
          "TableName": "ARTTables"
        },
        {
          "TableName": "PasswordRestrictions"
        },
        {
          "TableName": "CollationsV"
        },
        {
          "TableName": "Tables2_SZ"
        },
        {
          "TableName": "UnResolvedReferences"
        },
        {
          "TableName": "UsersV"
        },
        {
          "TableName": "ActionsVX"
        },
        {
          "TableName": "TVM_TD16"
        },
        {
          "TableName": "ChangedRowJournal"
        },
        {
          "TableName": "ReferencedTbls"
        },
        {
          "TableName": "dem"
        },
        {
          "TableName": "CollationTbl"
        },
        {
          "TableName": "Tables_SZ"
        },
        {
          "TableName": "DBQLSQLFeed"
        },
        {
          "TableName": "RI_Child_TablesV_SZ"
        },
        {
          "TableName": "RI_Distinct_ChildrenV_SZ"
        },
        {
          "TableName": "ReconfigTableStatsV"
        },
        {
          "TableName": "JournalsV_SZ"
        },
        {
          "TableName": "AllSpaceVX"
        },
        {
          "TableName": "savings_acct"
        },
        {
          "TableName": "ConstantValues"
        },
        {
          "TableName": "DSAConnectionsTbl"
        },
        {
          "TableName": "SecurityLogVX"
        },
        {
          "TableName": "View_XUserRoleTVMs"
        },
        {
          "TableName": "AllGlobalSpaceV_SZ"
        },
        {
          "TableName": "ColumnStatsV"
        },
        {
          "TableName": "TSETQueryText"
        },
        {
          "TableName": "ResIpmaView"
        },
        {
          "TableName": "DiskSpaceX"
        },
        {
          "TableName": "TDWMEventLog_TD15"
        },
        {
          "TableName": "FastLogV"
        },
        {
          "TableName": "MapsV_SZ"
        },
        {
          "TableName": "OwnerdbV_SZ"
        },
        {
          "TableName": "QRYLOGFEATUREUSECOUNTV"
        },
        {
          "TableName": "ResScpuView"
        },
        {
          "TableName": "TWMS_KruskalWallis"
        },
        {
          "TableName": "CompatibleBCal"
        },
        {
          "TableName": "RI_Parent_TablesVX"
        },
        {
          "TableName": "StatesMatrix"
        },
        {
          "TableName": "RI_Distinct_ParentsVX"
        },
        {
          "TableName": "Databases2X"
        },
        {
          "TableName": "TableStatsVX"
        },
        {
          "TableName": "CreateQCF"
        },
        {
          "TableName": "DBQLRules_SZ"
        },
        {
          "TableName": "GDOMLog"
        },
        {
          "TableName": "AssociationX"
        },
        {
          "TableName": "Events"
        },
        {
          "TableName": "ConnectRules"
        },
        {
          "TableName": "Accounts"
        },
        {
          "TableName": "DeleteUseCountVX"
        },
        {
          "TableName": "ReferencingTbls"
        },
        {
          "TableName": "PsfGlobalOpenvValues"
        },
        {
          "TableName": "DiskSpaceV"
        },
        {
          "TableName": "LoadTablesInfoV_SZ"
        },
        {
          "TableName": "MonitorRequest"
        },
        {
          "TableName": "Dbase_TD15"
        },
        {
          "TableName": "CALBASICS"
        },
        {
          "TableName": "Database_Default_Journals_SZ"
        },
        {
          "TableName": "Tables"
        },
        {
          "TableName": "QryLogUtilityV"
        },
        {
          "TableName": "AccessRights"
        },
        {
          "TableName": "ShowTblChecks_SZ"
        },
        {
          "TableName": "TDWMSummaryLog"
        },
        {
          "TableName": "Databases"
        },
        {
          "TableName": "CharSetsV"
        },
        {
          "TableName": "Next_TD15"
        },
        {
          "TableName": "TDWMLock"
        },
        {
          "TableName": "ResolvedDTS"
        },
        {
          "TableName": "ResolvedDTSV_SZ"
        },
        {
          "TableName": "BAR_TablesV_SZ"
        },
        {
          "TableName": "QryLogClientAttrV"
        },
        {
          "TableName": "IndexMaintenance"
        },
        {
          "TableName": "ActionHistoryTbl"
        },
        {
          "TableName": "UpdateUseCountVX"
        },
        {
          "TableName": "GlobalDBSpaceV_SZ"
        },
        {
          "TableName": "TableSizeVX"
        },
        {
          "TableName": "ErrorMsgs"
        },
        {
          "TableName": "TableStatsV"
        },
        {
          "TableName": "Zones"
        },
        {
          "TableName": "IndicesX"
        }
      ]
    }
  }
]
- Data Collected So Far: {
  "result_of_phase_1": [
    {
      "status": "success",
      "metadata": {
        "tool_name": "base_tableList",
        "sql": "select TableName from dbc.TablesV tv where tv.TableKind in ('T','V', 'O', 'Q')",
        "columns": [
          {
            "name": "TableName",
            "type": "str"
          }
        ],
        "row_count": 1023
      },
      "results": [
        {
          "TableName": "RI_Distinct_ChildrenVX"
        },
        {
          "TableName": "TWMS_Normal"
        },
        {
          "TableName": "ShowColChecks_SZ"
        },
        {
          "TableName": "ResSpmaView"
        },
        {
          "TableName": "View_XUserRoles2"
        },
        {
          "TableName": "PsfGlobalStates"
        },
        {
          "TableName": "CleanupQCFVer"
        },
        {
          "TableName": "COLUMNSJQVX"
        },
        {
          "TableName": "BAR_Tables2V_SZ"
        },
        {
          "TableName": "DBQLRulesV"
        },
        {
          "TableName": "DBQLUtilityTbl"
        },
        {
          "TableName": "ReconfigRedistOrderV"
        },
        {
          "TableName": "TempTableStatsV"
        },
        {
          "TableName": "MapListsV"
        },
        {
          "TableName": "CharTranslationsV"
        },
        {
          "TableName": "AMPUsageX"
        },
        {
          "TableName": "TableConstraints_TD16"
        },
        {
          "TableName": "Migration"
        },
        {
          "TableName": "DBQLRuleTbl_TD15"
        },
        {
          "TableName": "AnalysisLog"
        },
        {
          "TableName": "ColumnsX"
        },
        {
          "TableName": "CALENDAR_TD1310"
        },
        {
          "TableName": "Events_Media"
        },
        {
          "TableName": "UIFDependency"
        },
        {
          "TableName": "QryLogXMLV"
        },
        {
          "TableName": "Databases2_SZ"
        },
        {
          "TableName": "checking_acct"
        },
        {
          "TableName": "GT_TblQryStats"
        },
        {
          "TableName": "test2"
        },
        {
          "TableName": "JARS"
        },
        {
          "TableName": "QueryStatUseCountV_SZ"
        },
        {
          "TableName": "QryLogEventHis"
        },
        {
          "TableName": "DEMO_Customer360_Equipment"
        },
        {
          "TableName": "QueryStatUseCountVX"
        },
        {
          "TableName": "DiskSpaceVX"
        },
        {
          "TableName": "View_3OR"
        },
        {
          "TableName": "CALDATES"
        },
        {
          "TableName": "RoleInfoV"
        },
        {
          "TableName": "ZoneGuestsV_SZ"
        },
        {
          "TableName": "SessionInfo_SZ"
        },
        {
          "TableName": "Parents"
        },
        {
          "TableName": "JoinIndicesV_SZ"
        },
        {
          "TableName": "RI_Child_TablesVX"
        },
        {
          "TableName": "CleanupQCF"
        },
        {
          "TableName": "MapListEntry"
        },
        {
          "TableName": "COLUMNSQVX"
        },
        {
          "TableName": "ExportWidth"
        },
        {
          "TableName": "PartitioningConstraintsV"
        },
        {
          "TableName": "UDTInfo_TD15"
        },
        {
          "TableName": "UDFInfo"
        },
        {
          "TableName": "GEOMETRY_COLUMNS"
        },
        {
          "TableName": "ConstantDefs"
        },
        {
          "TableName": "UDFInfo_TD16"
        },
        {
          "TableName": "All_RI_ParentsX"
        },
        {
          "TableName": "TextTbl"
        },
        {
          "TableName": "View_XUserRolesBase"
        },
        {
          "TableName": "Database_Default_JournalsX"
        },
        {
          "TableName": "Cookie"
        },
        {
          "TableName": "Databases_SZ"
        },
        {
          "TableName": "Events_Configuration"
        },
        {
          "TableName": "SpaceSettingsTbl"
        },
        {
          "TableName": "QueryStatsV_SZ"
        },
        {
          "TableName": "EventCombos"
        },
        {
          "TableName": "BAR_StatsV_SZ"
        },
        {
          "TableName": "IndicesV_SZ"
        },
        {
          "TableName": "GT_DecidedAction"
        },
        {
          "TableName": "Dyn_LockLog_xsd"
        },
        {
          "TableName": "aoa_byom_models"
        },
        {
          "TableName": "RoleMembers_SZ"
        },
        {
          "TableName": "AccountInfoVX"
        },
        {
          "TableName": "StatUseCountVX"
        },
        {
          "TableName": "StatsVX"
        },
        {
          "TableName": "QryLogSQLV"
        },
        {
          "TableName": "QryLogTdwmSum"
        },
        {
          "TableName": "RuleDefs"
        },
        {
          "TableName": "DBQLRuleTbl"
        },
        {
          "TableName": "DBQLAutoDBATbl"
        },
        {
          "TableName": "VPartitions"
        },
        {
          "TableName": "UserRoleRightsV"
        },
        {
          "TableName": "StatsRecs"
        },
        {
          "TableName": "NetSecPolicyLogRuleTbl"
        },
        {
          "TableName": "ConnectRules_SZ"
        },
        {
          "TableName": "DBQLParamTbl"
        },
        {
          "TableName": "User_Default_JournalsX"
        },
        {
          "TableName": "AllRightsX"
        },
        {
          "TableName": "GT_Error_Tables"
        },
        {
          "TableName": "View_2OR"
        },
        {
          "TableName": "TD_FILTERFACTORY1D_TMP_TABLE"
        },
        {
          "TableName": "RCC_Configuration"
        },
        {
          "TableName": "AllRoleRightsV"
        },
        {
          "TableName": "customer_dqa"
        },
        {
          "TableName": "ZonesV_SZ"
        },
        {
          "TableName": "BAR_JoinIndicesV_SZ"
        },
        {
          "TableName": "DBQLSqlTbl_TD15"
        },
        {
          "TableName": "COLUMNSJQV"
        },
        {
          "TableName": "InsertUseCountV_SZ"
        },
        {
          "TableName": "AnalyzeSPInstanceTbl"
        },
        {
          "TableName": "ownerdb"
        },
        {
          "TableName": "DBQLQERTbl"
        },
        {
          "TableName": "SecurityLog_SZ"
        },
        {
          "TableName": "InsertUseCountV"
        },
        {
          "TableName": "COLUMNSQV"
        },
        {
          "TableName": "QryLogXMLV_SZ"
        },
        {
          "TableName": "RepTablesVX"
        },
        {
          "TableName": "JournalsX"
        },
        {
          "TableName": "HostsInfoV"
        },
        {
          "TableName": "All"
        },
        {
          "TableName": "QryLogExplainV"
        },
        {
          "TableName": "MapsV"
        },
        {
          "TableName": "QRYLogXMLDocV_SZ"
        },
        {
          "TableName": "DBSRetryableErrors"
        },
        {
          "TableName": "IndexConstraintsV"
        },
        {
          "TableName": "View_2ORV"
        },
        {
          "TableName": "AlertRequest"
        },
        {
          "TableName": "IndicesVX"
        },
        {
          "TableName": "Indexes_TD15"
        },
        {
          "TableName": "AsgdSecConstraints"
        },
        {
          "TableName": "Predicate_Field"
        },
        {
          "TableName": "QryLogEvents"
        },
        {
          "TableName": "All_RI_ChildrenX"
        },
        {
          "TableName": "ExclusionListsVX"
        },
        {
          "TableName": "ColumnsVX"
        },
        {
          "TableName": "Owners"
        },
        {
          "TableName": "RCC_Media"
        },
        {
          "TableName": "accounts"
        },
        {
          "TableName": "QryLogExceptions"
        },
        {
          "TableName": "RscPartitions"
        },
        {
          "TableName": "RepBatchStatus"
        },
        {
          "TableName": "ObjectUseCountVX"
        },
        {
          "TableName": "BusinessCalendarPatterns"
        },
        {
          "TableName": "PartitioningConstraintsVX"
        },
        {
          "TableName": "BAR_RI_Distinct_ParentsV_SZ"
        },
        {
          "TableName": "AllRightsV"
        },
        {
          "TableName": "Translation"
        },
        {
          "TableName": "Columns_SZ"
        },
        {
          "TableName": "Relation"
        },
        {
          "TableName": "CallCenter"
        },
        {
          "TableName": "DEMO_DigitalEvents_Retail_Events"
        },
        {
          "TableName": "DBQLXMLTbl_TD15"
        },
        {
          "TableName": "IndexUseCountVX"
        },
        {
          "TableName": "ROUTINE_JAR_USAGE"
        },
        {
          "TableName": "UsrAsgdSecConstraintsV_SZ"
        },
        {
          "TableName": "userdb"
        },
        {
          "TableName": "StatsV"
        },
        {
          "TableName": "ddl"
        },
        {
          "TableName": "TransientJournal"
        },
        {
          "TableName": "RoleInfo_SZ"
        },
        {
          "TableName": "Equipment"
        },
        {
          "TableName": "IndexStatsV_SZ"
        },
        {
          "TableName": "IndexUseCountV_SZ"
        },
        {
          "TableName": "WorkerSPInstanceTbl"
        },
        {
          "TableName": "ViewStatsV_SZ"
        },
        {
          "TableName": "DBQLStepTbl"
        },
        {
          "TableName": "IndexConstraintsVX"
        },
        {
          "TableName": "UIF_V"
        },
        {
          "TableName": "View_3ORV"
        },
        {
          "TableName": "Authorizations"
        },
        {
          "TableName": "QryLogSummaryV"
        },
        {
          "TableName": "AssociationV"
        },
        {
          "TableName": "QryLogV_SZ"
        },
        {
          "TableName": "ColumnCorrelation"
        },
        {
          "TableName": "TableText"
        },
        {
          "TableName": "ConnectRulesTbl"
        },
        {
          "TableName": "ColumnUseCountVX"
        },
        {
          "TableName": "QryLogTDWMV_SZ"
        },
        {
          "TableName": "Children_SZ"
        },
        {
          "TableName": "Events"
        },
        {
          "TableName": "RoleMembersV"
        },
        {
          "TableName": "Database_Default_JournalsVX"
        },
        {
          "TableName": "Actions"
        },
        {
          "TableName": "CostProfiles"
        },
        {
          "TableName": "RuleBypass"
        },
        {
          "TableName": "RI_Distinct_Parents_SZ"
        },
        {
          "TableName": "RuleStateValues"
        },
        {
          "TableName": "QryLogUtilityV_SZ"
        },
        {
          "TableName": "JARS"
        },
        {
          "TableName": "RscPartStates"
        },
        {
          "TableName": "User_Default_JournalsVX"
        },
        {
          "TableName": "BAR_Databases2V_SZ"
        },
        {
          "TableName": "Digital_Retail_Events"
        },
        {
          "TableName": "demddl"
        },
        {
          "TableName": "DBQLObjTbl_TD15"
        },
        {
          "TableName": "ROUTINE_JAR_USAGE"
        },
        {
          "TableName": "QueryStatsTbl"
        },
        {
          "TableName": "InDoubtLogV"
        },
        {
          "TableName": "Triggers"
        },
        {
          "TableName": "SeqNumber"
        },
        {
          "TableName": "BAR_ArchiveLoggingObjsV"
        },
        {
          "TableName": "BusinessCalendar"
        },
        {
          "TableName": "RI_Parent_Tables_SZ"
        },
        {
          "TableName": "DeleteUseCountV"
        },
        {
          "TableName": "TableToSparseMapSizingV"
        },
        {
          "TableName": "TableConstraints_TD15"
        },
        {
          "TableName": "DeleteOldInDoubtV"
        },
        {
          "TableName": "UDTTransform"
        },
        {
          "TableName": "BAR_ChildrenV_SZ"
        },
        {
          "TableName": "QueryStatUseCountV"
        },
        {
          "TableName": "EventLog_TD15"
        },
        {
          "TableName": "DBQLRules"
        },
        {
          "TableName": "UpdateUseCountV"
        },
        {
          "TableName": "DBQLStepTbl_TD15"
        },
        {
          "TableName": "FastLog"
        },
        {
          "TableName": "DatabasesX"
        },
        {
          "TableName": "UDTInfo"
        },
        {
          "TableName": "Tables2"
        },
        {
          "TableName": "Children"
        },
        {
          "TableName": "User_Default_JournalsV_SZ"
        },
        {
          "TableName": "JAR_JAR_USAGE"
        },
        {
          "TableName": "LoadTablesInfoVX"
        },
        {
          "TableName": "RangePartExpr"
        },
        {
          "TableName": "Global"
        },
        {
          "TableName": "AllTempTables"
        },
        {
          "TableName": "QryLogStepsV_SZ"
        },
        {
          "TableName": "QryLogExplain"
        },
        {
          "TableName": "AuthorizationsVX"
        },
        {
          "TableName": "IndexConstraintsV_SZ"
        },
        {
          "TableName": "ErrorTblsVX"
        },
        {
          "TableName": "StatsTbl"
        },
        {
          "TableName": "QryLogObjectsV"
        },
        {
          "TableName": "SQLRestrictedWords"
        },
        {
          "TableName": "DBQLSummaryTbl"
        },
        {
          "TableName": "UpdateUseCountV_SZ"
        },
        {
          "TableName": "userdbV"
        },
        {
          "TableName": "QryLogTDWMV"
        },
        {
          "TableName": "QryLogSummary"
        },
        {
          "TableName": "ActionQueueTbl"
        },
        {
          "TableName": "VpOpenvValues"
        },
        {
          "TableName": "DBQLogTbl"
        },
        {
          "TableName": "RepTables"
        },
        {
          "TableName": "FunctionsVX"
        },
        {
          "TableName": "Ownerdb_SZ"
        },
        {
          "TableName": "ExternalSPsX"
        },
        {
          "TableName": "SW_Event_Log"
        },
        {
          "TableName": "ownerdbV"
        },
        {
          "TableName": "DatabaseUseCountVX"
        },
        {
          "TableName": "CostProfileTypes"
        },
        {
          "TableName": "SettingsTbl"
        },
        {
          "TableName": "BAR_ownerdbV_SZ"
        },
        {
          "TableName": "UserGrantedRightsV"
        },
        {
          "TableName": "QryLogSummaryV_SZ"
        },
        {
          "TableName": "CostProfiles_v"
        },
        {
          "TableName": "ARC_SessionInfoVX"
        },
        {
          "TableName": "DBQLExplainTbl_TD15"
        },
        {
          "TableName": "Authorizations_SZ"
        },
        {
          "TableName": "RI_Child_Tables_SZ"
        },
        {
          "TableName": "ExpStatsV_SZ"
        },
        {
          "TableName": "IdCol"
        },
        {
          "TableName": "ObjectListsV"
        },
        {
          "TableName": "TablesVX"
        },
        {
          "TableName": "BAR_MapsV"
        },
        {
          "TableName": "BAR_MapGrantsV"
        },
        {
          "TableName": "JournalsVX"
        },
        {
          "TableName": "AssociationVX"
        },
        {
          "TableName": "QryLogStepsV"
        },
        {
          "TableName": "customer_analysis"
        },
        {
          "TableName": "DBQLXMLLockTbl"
        },
        {
          "TableName": "Indexes"
        },
        {
          "TableName": "DBCAssociation"
        },
        {
          "TableName": "AccLogTbl_TD15"
        },
        {
          "TableName": "UserRightsV"
        },
        {
          "TableName": "Functions"
        },
        {
          "TableName": "DeleteAccessLog"
        },
        {
          "TableName": "SessionInfo"
        },
        {
          "TableName": "QryLogSQL"
        },
        {
          "TableName": "TempTables"
        },
        {
          "TableName": "TempStatistics_TD15"
        },
        {
          "TableName": "QryLogV"
        },
        {
          "TableName": "RepTablesX"
        },
        {
          "TableName": "ArchiveLoggingObjsV_SZ"
        },
        {
          "TableName": "EventComboActions"
        },
        {
          "TableName": "AnalysisStmts"
        },
        {
          "TableName": "CostProfileValues_v"
        },
        {
          "TableName": "All_RI_Parents_SZ"
        },
        {
          "TableName": "QryLogFeatureUseJSON"
        },
        {
          "TableName": "TriggersV_SZ"
        },
        {
          "TableName": "RI_Distinct_Children_SZ"
        },
        {
          "TableName": "CommandsBatchDtlTbl"
        },
        {
          "TableName": "RuleQualifyCriteria"
        },
        {
          "TableName": "ExcludedTbl"
        },
        {
          "TableName": "GT_inplace_join_tables"
        },
        {
          "TableName": "IndexUseCountV"
        },
        {
          "TableName": "DBQLExplainFeed"
        },
        {
          "TableName": "Databases2VX"
        },
        {
          "TableName": "CDS_Exclusions"
        },
        {
          "TableName": "CompatibleTmp"
        },
        {
          "TableName": "WorkloadStatus"
        },
        {
          "TableName": "TriggersV"
        },
        {
          "TableName": "TableConstraints"
        },
        {
          "TableName": "TDWMSummaryLog_TD15"
        },
        {
          "TableName": "Databases2"
        },
        {
          "TableName": "TWMS_ShapiroWilkQuantiles"
        },
        {
          "TableName": "AccessLogV"
        },
        {
          "TableName": "RI_Distinct_Children"
        },
        {
          "TableName": "TempTableStatsV_SZ"
        },
        {
          "TableName": "ISOBCal"
        },
        {
          "TableName": "CALENDAR"
        },
        {
          "TableName": "ResolvedDTS_SZ"
        },
        {
          "TableName": "Shredded_LockTbl"
        },
        {
          "TableName": "ExportWidthV"
        },
        {
          "TableName": "ExternalSPs"
        },
        {
          "TableName": "LogonRulesV"
        },
        {
          "TableName": "AllTempTablesV"
        },
        {
          "TableName": "ErrorTblsV_SZ"
        },
        {
          "TableName": "AuthorizationsV_SZ"
        },
        {
          "TableName": "ArchiveLoggingObjsTbl"
        },
        {
          "TableName": "WlcUtilityMappings"
        },
        {
          "TableName": "CommandsTbl"
        },
        {
          "TableName": "AMPUsage_SZ"
        },
        {
          "TableName": "QryLogSQLDocV_SZ"
        },
        {
          "TableName": "AnalyzeLogTbl"
        },
        {
          "TableName": "BAR_RI_Distinct_ParentsV"
        },
        {
          "TableName": "ExcludedV"
        },
        {
          "TableName": "BAREventsV"
        },
        {
          "TableName": "PeriodsVX"
        },
        {
          "TableName": "TableTextV"
        },
        {
          "TableName": "StatUseCountV"
        },
        {
          "TableName": "QryLogTDWM"
        },
        {
          "TableName": "Workload"
        },
        {
          "TableName": "UDFInfo_TD15"
        },
        {
          "TableName": "AccountInfoV"
        },
        {
          "TableName": "TableTextV_SZ"
        },
        {
          "TableName": "IndicesV"
        },
        {
          "TableName": "last_monitor"
        },
        {
          "TableName": "DBQLogTbl_TD15"
        },
        {
          "TableName": "CommandsListTbl"
        },
        {
          "TableName": "QryLogObjects"
        },
        {
          "TableName": "SecurityLog"
        },
        {
          "TableName": "t10"
        },
        {
          "TableName": "All_RI_ParentsVX"
        },
        {
          "TableName": "DiskSpaceV_SZ"
        },
        {
          "TableName": "QryLogParamJSON"
        },
        {
          "TableName": "AccLogRulesV"
        },
        {
          "TableName": "EndOfGroupQueueTbl"
        },
        {
          "TableName": "MultiExpStatsVX"
        },
        {
          "TableName": "ErrorTblsV"
        },
        {
          "TableName": "QryLogSQLV_SZ"
        },
        {
          "TableName": "All_RI_ParentsV_SZ"
        },
        {
          "TableName": "ZoneGuests"
        },
        {
          "TableName": "DatasetSchemaInfo"
        },
        {
          "TableName": "servercontrolsem"
        },
        {
          "TableName": "ObjectUseCountV"
        },
        {
          "TableName": "AllSpace"
        },
        {
          "TableName": "ProfileInfo"
        },
        {
          "TableName": "SessionTbl"
        },
        {
          "TableName": "ServerInfo"
        },
        {
          "TableName": "AMPUsageV_SZ"
        },
        {
          "TableName": "CostProfileTypes_v"
        },
        {
          "TableName": "Table_LevelConstraintsV_SZ"
        },
        {
          "TableName": "DeleteAccessLogV_SZ"
        },
        {
          "TableName": "CommandsBatchDtlHistoryTbl"
        },
        {
          "TableName": "TablesX"
        },
        {
          "TableName": "SingleRowRelation"
        },
        {
          "TableName": "BAR_StatsVX"
        },
        {
          "TableName": "DatabasesVX"
        },
        {
          "TableName": "Profiles"
        },
        {
          "TableName": "ActionHistoryV"
        },
        {
          "TableName": "MultiColumnStatsVX"
        },
        {
          "TableName": "ColumnUseCountV"
        },
        {
          "TableName": "Tables2V"
        },
        {
          "TableName": "pima_patient_predictions"
        },
        {
          "TableName": "DiskSpace"
        },
        {
          "TableName": "TDWMGlobalRulesV"
        },
        {
          "TableName": "TableTextX"
        },
        {
          "TableName": "TWMS_ShapiroWilkCoefficients"
        },
        {
          "TableName": "GT_Ranked_Tables"
        },
        {
          "TableName": "ObjectListTbl"
        },
        {
          "TableName": "RCMedia"
        },
        {
          "TableName": "CommandsHistoryTbl"
        },
        {
          "TableName": "TWMS_KolmogorovSmirnov"
        },
        {
          "TableName": "RestrictedWords"
        },
        {
          "TableName": "All_RI_Children_SZ"
        },
        {
          "TableName": "AllocGroups"
        },
        {
          "TableName": "dbcstatsv"
        },
        {
          "TableName": "TempUDTXFORM"
        },
        {
          "TableName": "ResolvedDTSVX"
        },
        {
          "TableName": "AMPUsageVX"
        },
        {
          "TableName": "QRYLogXMLDocV"
        },
        {
          "TableName": "MultiExpStatsV"
        },
        {
          "TableName": "QuerySteps"
        },
        {
          "TableName": "LogonRuleTbl"
        },
        {
          "TableName": "AllocGroupStates"
        },
        {
          "TableName": "AllSpace_SZ"
        },
        {
          "TableName": "Digital_Retail_Events"
        },
        {
          "TableName": "RepGroup"
        },
        {
          "TableName": "WlcOpenvValues"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsVX"
        },
        {
          "TableName": "ColumnsV"
        },
        {
          "TableName": "All_RI_Children"
        },
        {
          "TableName": "dbcindexesv"
        },
        {
          "TableName": "User_Default_JournalsV"
        },
        {
          "TableName": "UIF_Info"
        },
        {
          "TableName": "DBCInfoTbl"
        },
        {
          "TableName": "FunctionAliasVX"
        },
        {
          "TableName": "IndexTable"
        },
        {
          "TableName": "DeleteUseCountV_SZ"
        },
        {
          "TableName": "View_UserDBsExtVX"
        },
        {
          "TableName": "RCEvent"
        },
        {
          "TableName": "RI_Child_Tables"
        },
        {
          "TableName": "QryLogTDWM_SZ"
        },
        {
          "TableName": "TVFields"
        },
        {
          "TableName": "ResUsageSps"
        },
        {
          "TableName": "MapListsVX"
        },
        {
          "TableName": "DEMO_Customer360_CallCenter"
        },
        {
          "TableName": "RoleInfoX"
        },
        {
          "TableName": "TDWMEventHistory"
        },
        {
          "TableName": "RecoveryPJTable"
        },
        {
          "TableName": "TWMS_ChiSquare"
        },
        {
          "TableName": "SysSecDefaults"
        },
        {
          "TableName": "TriggersX"
        },
        {
          "TableName": "FunctionAliasInfoV"
        },
        {
          "TableName": "FunctionAliasInfoVX"
        },
        {
          "TableName": "TableSize"
        },
        {
          "TableName": "Database_Default_JournalsV_SZ"
        },
        {
          "TableName": "Dbase"
        },
        {
          "TableName": "AMPUsageV"
        },
        {
          "TableName": "QryLogSteps"
        },
        {
          "TableName": "BAR_ChildrenV"
        },
        {
          "TableName": "QryLogParamJSON_SZ"
        },
        {
          "TableName": "Zones_TD15"
        },
        {
          "TableName": "QryLogSummary_SZ"
        },
        {
          "TableName": "UDTTransformV"
        },
        {
          "TableName": "AllGlobalSpaceV"
        },
        {
          "TableName": "QryLogParamV_SZ"
        },
        {
          "TableName": "View_UserTablesExtVX"
        },
        {
          "TableName": "DBQLAmpDataTbl"
        },
        {
          "TableName": "DBCInfo"
        },
        {
          "TableName": "customer"
        },
        {
          "TableName": "Software_Event_LogV"
        },
        {
          "TableName": "SecConstraints"
        },
        {
          "TableName": "AllRightsVX"
        },
        {
          "TableName": "StatsTbl"
        },
        {
          "TableName": "DBQLXMLLockTbl_TD15"
        },
        {
          "TableName": "RoleInfo"
        },
        {
          "TableName": "ProfileInfoX"
        },
        {
          "TableName": "AllGlobalSpaceVX"
        },
        {
          "TableName": "Databases2V"
        },
        {
          "TableName": "BusinessCalendarExceptions"
        },
        {
          "TableName": "AllRights_SZ"
        },
        {
          "TableName": "SecurityDefaults"
        },
        {
          "TableName": "RoleMembersX"
        },
        {
          "TableName": "AllRoleRightsV_SZ"
        },
        {
          "TableName": "ForeignTablesV"
        },
        {
          "TableName": "TablesV_SZ"
        },
        {
          "TableName": "ErrorTbls"
        },
        {
          "TableName": "METADATA_OBJECTS"
        },
        {
          "TableName": "AutomateHistoryTbl"
        },
        {
          "TableName": "All_RI_ChildrenVX"
        },
        {
          "TableName": "All_RI_ChildrenV_SZ"
        },
        {
          "TableName": "GlobalDBSpaceV"
        },
        {
          "TableName": "JournalsV"
        },
        {
          "TableName": "WlcPerfGroupMappings"
        },
        {
          "TableName": "ForeignTablesInfoV"
        },
        {
          "TableName": "RepTablesV"
        },
        {
          "TableName": "BusinessCalendarPattern"
        },
        {
          "TableName": "CDS_PercentData"
        },
        {
          "TableName": "DatabaseUseCountV"
        },
        {
          "TableName": "TDWMEventLog"
        },
        {
          "TableName": "All_RI_Parents"
        },
        {
          "TableName": "AllRoleRights_SZ"
        },
        {
          "TableName": "TDWMSummaryLog_TD16"
        },
        {
          "TableName": "CharSets"
        },
        {
          "TableName": "DEFAULTSESSIONATTRIBUTES"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsV"
        },
        {
          "TableName": "QryLog"
        },
        {
          "TableName": "CDSTableSizeV"
        },
        {
          "TableName": "IndexColumns"
        },
        {
          "TableName": "Database_Default_JournalsV"
        },
        {
          "TableName": "TableStatsV_SZ"
        },
        {
          "TableName": "JoinIndicesV"
        },
        {
          "TableName": "QryLogSQL_SZ"
        },
        {
          "TableName": "BusinessCalendarException"
        },
        {
          "TableName": "DBQLRulesV_SZ"
        },
        {
          "TableName": "Configurations"
        },
        {
          "TableName": "AnalyzerHistoryTbl"
        },
        {
          "TableName": "HelpSyntax"
        },
        {
          "TableName": "QryLogSteps_SZ"
        },
        {
          "TableName": "AccLogRules_SZ"
        },
        {
          "TableName": "ResolvedDTSV"
        },
        {
          "TableName": "WorkloadQueries"
        },
        {
          "TableName": "BAR_StatsV"
        },
        {
          "TableName": "Shredded_TransTbl"
        },
        {
          "TableName": "RI_Distinct_ChildrenV"
        },
        {
          "TableName": "RI_Distinct_Parents"
        },
        {
          "TableName": "MultiColumnStatsV"
        },
        {
          "TableName": "TWMS_Normalshort"
        },
        {
          "TableName": "TDWMExceptionLog"
        },
        {
          "TableName": "RecoveryLockTable"
        },
        {
          "TableName": "TVM"
        },
        {
          "TableName": "DatasetSchemaDependenciesV"
        },
        {
          "TableName": "QryLogExceptionsV_SZ"
        },
        {
          "TableName": "GT_ObjectListMap"
        },
        {
          "TableName": "DBQLSummaryTbl_TD15"
        },
        {
          "TableName": "ConstraintFunctionsV"
        },
        {
          "TableName": "TablesV"
        },
        {
          "TableName": "PeriodsV"
        },
        {
          "TableName": "Users"
        },
        {
          "TableName": "DatabasesV"
        },
        {
          "TableName": "Tables2V_SZ"
        },
        {
          "TableName": "QryLogObjectsV_SZ"
        },
        {
          "TableName": "AllSpaceV_SZ"
        },
        {
          "TableName": "Databases2V_SZ"
        },
        {
          "TableName": "DatabaseUseCountV_SZ"
        },
        {
          "TableName": "GlobalDBSpaceVX"
        },
        {
          "TableName": "UsrAsgdSecConstraintsVX"
        },
        {
          "TableName": "QryLogParamV"
        },
        {
          "TableName": "pima_patient_features"
        },
        {
          "TableName": "Collations"
        },
        {
          "TableName": "ExclusionListTbl"
        },
        {
          "TableName": "ArchiveLoggingObjsVX"
        },
        {
          "TableName": "QryLogExplainDocV"
        },
        {
          "TableName": "QryLogSQLDocV"
        },
        {
          "TableName": "TableSizeV_SZ"
        },
        {
          "TableName": "ResUsageSmhm"
        },
        {
          "TableName": "CostConstantsTbl"
        },
        {
          "TableName": "DEMO_Customer360_Online"
        },
        {
          "TableName": "TWMS_Lilliefors"
        },
        {
          "TableName": "DefaultsTbl"
        },
        {
          "TableName": "TableTextVX"
        },
        {
          "TableName": "test001"
        },
        {
          "TableName": "FunctionAliasV"
        },
        {
          "TableName": "Events_MediaX"
        },
        {
          "TableName": "UDTInfoV"
        },
        {
          "TableName": "ExternalSPsVX"
        },
        {
          "TableName": "CallCenter"
        },
        {
          "TableName": "QryLogExplainDocV_SZ"
        },
        {
          "TableName": "TempStatistics"
        },
        {
          "TableName": "GT_StepInfoTbl"
        },
        {
          "TableName": "Online"
        },
        {
          "TableName": "ZoneGuestsVX"
        },
        {
          "TableName": "ResolvedDTSX"
        },
        {
          "TableName": "AllTempTablesX"
        },
        {
          "TableName": "ObjectsInSparseMapsV"
        },
        {
          "TableName": "TableToSparseMapSizingVX"
        },
        {
          "TableName": "ResUsageSvdsk"
        },
        {
          "TableName": "ResUsageSawt"
        },
        {
          "TableName": "UsrAsgdSecConstraintsV"
        },
        {
          "TableName": "SHOWTBLCHECKSX"
        },
        {
          "TableName": "QryLogExplainV_SZ"
        },
        {
          "TableName": "AccountInfo_SZ"
        },
        {
          "TableName": "ManagerSPInstanceTbl"
        },
        {
          "TableName": "InDoubtResLog"
        },
        {
          "TableName": "ResCPUUsageByPEView"
        },
        {
          "TableName": "AnalyzerEvidenceTbl"
        },
        {
          "TableName": "Tables2X"
        },
        {
          "TableName": "TeradataBCal"
        },
        {
          "TableName": "LoadTablesInfoV"
        },
        {
          "TableName": "Table_LevelConstraintsX"
        },
        {
          "TableName": "ReconfigDeleteOrderTbl"
        },
        {
          "TableName": "LogOnOffVX"
        },
        {
          "TableName": "DataBaseSpace_TD15"
        },
        {
          "TableName": "RI_Parent_Tables"
        },
        {
          "TableName": "credit_tran"
        },
        {
          "TableName": "View_XUserOnlyPublicDBs"
        },
        {
          "TableName": "SHOWCOLCHECKS"
        },
        {
          "TableName": "DataDemographics"
        },
        {
          "TableName": "QryLogFeatureListV"
        },
        {
          "TableName": "OnlineJournalInfoTbl"
        },
        {
          "TableName": "QryLogExceptions_SZ"
        },
        {
          "TableName": "QryLogObjects_SZ"
        },
        {
          "TableName": "BAR_JoinIndicesV"
        },
        {
          "TableName": "Table_LevelConstraints"
        },
        {
          "TableName": "QryRelX"
        },
        {
          "TableName": "dempart"
        },
        {
          "TableName": "ActionsV"
        },
        {
          "TableName": "Equipment"
        },
        {
          "TableName": "Events_ConfigurationV"
        },
        {
          "TableName": "BAR_ownerdbV"
        },
        {
          "TableName": "All_RI_ChildrenV"
        },
        {
          "TableName": "Predicate"
        },
        {
          "TableName": "AccLogRuleTbl_TD15"
        },
        {
          "TableName": "QueryList"
        },
        {
          "TableName": "OrdSysChngTable"
        },
        {
          "TableName": "CALENDARTMP"
        },
        {
          "TableName": "AllRoleRights"
        },
        {
          "TableName": "Events_MediaV"
        },
        {
          "TableName": "AccountInfoV_SZ"
        },
        {
          "TableName": "ObjectListsVX"
        },
        {
          "TableName": "DatasetSchemaInfoV"
        },
        {
          "TableName": "ConstraintValues"
        },
        {
          "TableName": "AccessLog_SZ"
        },
        {
          "TableName": "RCC_ConfigurationV"
        },
        {
          "TableName": "RestrictedWordsV"
        },
        {
          "TableName": "QueryBandReservedNames"
        },
        {
          "TableName": "DBQLStepTbl_TD16"
        },
        {
          "TableName": "ConstraintFunctions"
        },
        {
          "TableName": "ShowTblChecksV_SZ"
        },
        {
          "TableName": "UserRoleRights"
        },
        {
          "TableName": "View_XUserDPRSDBs"
        },
        {
          "TableName": "OpEnvs"
        },
        {
          "TableName": "ActualTableSizeV"
        },
        {
          "TableName": "AllRightsV_SZ"
        },
        {
          "TableName": "ObjectUsage"
        },
        {
          "TableName": "ProfileInfoV_SZ"
        },
        {
          "TableName": "RoleMembersVX"
        },
        {
          "TableName": "ProfileInfoV"
        },
        {
          "TableName": "ReconfigRedistOrderTbl"
        },
        {
          "TableName": "TDWMGlobalRulesV"
        },
        {
          "TableName": "RI_Child_TablesV"
        },
        {
          "TableName": "AccLogRuleTbl"
        },
        {
          "TableName": "Query"
        },
        {
          "TableName": "ZonesVX"
        },
        {
          "TableName": "StatsV"
        },
        {
          "TableName": "QueryListEntry"
        },
        {
          "TableName": "IndexConstraints"
        },
        {
          "TableName": "Next"
        },
        {
          "TableName": "ResUsageShst"
        },
        {
          "TableName": "CharTranslations"
        },
        {
          "TableName": "SHOWTBLCHECKS"
        },
        {
          "TableName": "RI_Parent_TablesX"
        },
        {
          "TableName": "SysRcvStatJournal"
        },
        {
          "TableName": "OldPasswords"
        },
        {
          "TableName": "DatabasesV_SZ"
        },
        {
          "TableName": "SessionInfoV_SZ"
        },
        {
          "TableName": "ResSmhmView"
        },
        {
          "TableName": "StatUseCountV_SZ"
        },
        {
          "TableName": "QryLogParam"
        },
        {
          "TableName": "ConstraintFunctionsV_SZ"
        },
        {
          "TableName": "SerialActionQueueTbl"
        },
        {
          "TableName": "WlcExceptCriteria"
        },
        {
          "TableName": "ViewStatsV"
        },
        {
          "TableName": "WlcExceptActions"
        },
        {
          "TableName": "SecConstraintsVX"
        },
        {
          "TableName": "RoleInfoVX"
        },
        {
          "TableName": "ReconfigInfoTbl"
        },
        {
          "TableName": "AllTempTablesVX"
        },
        {
          "TableName": "QryLog_SZ"
        },
        {
          "TableName": "QueryStatsV"
        },
        {
          "TableName": "Events_ConfigurationX"
        },
        {
          "TableName": "IndexStatsV"
        },
        {
          "TableName": "BAR_TablesV"
        },
        {
          "TableName": "MapSimulationV"
        },
        {
          "TableName": "QryLockLogXMLV_SZ"
        },
        {
          "TableName": "GlobalDBSpace"
        },
        {
          "TableName": "TVM_TD15"
        },
        {
          "TableName": "ResUsageSpdsk"
        },
        {
          "TableName": "AccLogRulesV_SZ"
        },
        {
          "TableName": "RCC_ConfigurationX"
        },
        {
          "TableName": "AllRights"
        },
        {
          "TableName": "SpaceExcludeDBListTbl"
        },
        {
          "TableName": "ZoneGuestsV"
        },
        {
          "TableName": "DBQLXMLStatsUsageFeed"
        },
        {
          "TableName": "RepGroupTables"
        },
        {
          "TableName": "ResCPUUsageByAMPView"
        },
        {
          "TableName": "DBQLogTbl_TD16"
        },
        {
          "TableName": "SettingsV"
        },
        {
          "TableName": "AccessLogV_SZ"
        },
        {
          "TableName": "ConstraintValuesV"
        },
        {
          "TableName": "SHOWCOLCHECKSX"
        },
        {
          "TableName": "TD_PushProfileInfo"
        },
        {
          "TableName": "GT_ranked_join_tables"
        },
        {
          "TableName": "QryLogExplain_SZ"
        },
        {
          "TableName": "HostsInfo"
        },
        {
          "TableName": "ZonesV"
        },
        {
          "TableName": "DBCInfoV"
        },
        {
          "TableName": "XMLQCD"
        },
        {
          "TableName": "ConstraintValuesV_SZ"
        },
        {
          "TableName": "DebugTraceTbl"
        },
        {
          "TableName": "PersistentSpoolTables"
        },
        {
          "TableName": "BAR_FunctionsV"
        },
        {
          "TableName": "ServerInfoVX"
        },
        {
          "TableName": "LogonRules_SZ"
        },
        {
          "TableName": "Association"
        },
        {
          "TableName": "ArchiveLoggingObjsV"
        },
        {
          "TableName": "ProfileInfoVX"
        },
        {
          "TableName": "IndexRecommendations"
        },
        {
          "TableName": "Index_Field"
        },
        {
          "TableName": "RCC_MediaV"
        },
        {
          "TableName": "IndexStatsVX"
        },
        {
          "TableName": "TblSrvInfoVX"
        },
        {
          "TableName": "All_RI_ParentsV"
        },
        {
          "TableName": "TVFields_TD15"
        },
        {
          "TableName": "EventLog_TD16"
        },
        {
          "TableName": "ChildrenV"
        },
        {
          "TableName": "ResUsageIvpr"
        },
        {
          "TableName": "RoleMembers"
        },
        {
          "TableName": "RCC_MediaX"
        },
        {
          "TableName": "UserRights"
        },
        {
          "TableName": "CALENDAR_TD_ISO_COMPATIBLE"
        },
        {
          "TableName": "transactions"
        },
        {
          "TableName": "ObjectList"
        },
        {
          "TableName": "DBQLXMLFeed"
        },
        {
          "TableName": "UtilityLockJournalTable"
        },
        {
          "TableName": "SecurityDefaultsV"
        },
        {
          "TableName": "LogOnOffV"
        },
        {
          "TableName": "MapGrantsV"
        },
        {
          "TableName": "ProfileAsgdSecConstraintsV_SZ"
        },
        {
          "TableName": "SequenceNumber"
        },
        {
          "TableName": "View_XUserOnlyRoleDBs"
        },
        {
          "TableName": "RI_Distinct_ChildrenX"
        },
        {
          "TableName": "ResSawtView"
        },
        {
          "TableName": "ShowColChecksV_SZ"
        },
        {
          "TableName": "ProfileInfo_SZ"
        },
        {
          "TableName": "RepRulesetTbl"
        },
        {
          "TableName": "RepCaptureRulesV"
        },
        {
          "TableName": "ISOTmp"
        },
        {
          "TableName": "ServerInfoV"
        },
        {
          "TableName": "SecConstraintsV_SZ"
        },
        {
          "TableName": "View_XUserRoleDBs2"
        },
        {
          "TableName": "RI_Distinct_ParentsV"
        },
        {
          "TableName": "EventsV"
        },
        {
          "TableName": "Opt_XMLPlan_Table"
        },
        {
          "TableName": "RI_Distinct_ParentsX"
        },
        {
          "TableName": "ResUsageSldv"
        },
        {
          "TableName": "MapGrantsVX"
        },
        {
          "TableName": "QryLogXMLV"
        },
        {
          "TableName": "SystemQTbl"
        },
        {
          "TableName": "LocalSessionStatusTable"
        },
        {
          "TableName": "QryLogXMLStatsUsageV"
        },
        {
          "TableName": "GlobalParams"
        },
        {
          "TableName": "SecurityLogV_SZ"
        },
        {
          "TableName": "ResSpsView"
        },
        {
          "TableName": "MapListTbl"
        },
        {
          "TableName": "Events_ConfigurationVX"
        },
        {
          "TableName": "Temp_ReconfigSpace"
        },
        {
          "TableName": "SecConstraintsV"
        },
        {
          "TableName": "ResSvdskView"
        },
        {
          "TableName": "SHOWCOLCHECKSV"
        },
        {
          "TableName": "BAR_Tables2V"
        },
        {
          "TableName": "TDWMEventHistory_TD15"
        },
        {
          "TableName": "ActionHistoryVX"
        },
        {
          "TableName": "TWMS_T"
        },
        {
          "TableName": "Events_MediaVX"
        },
        {
          "TableName": "spatial_ref_sys"
        },
        {
          "TableName": "SessionStateTbl"
        },
        {
          "TableName": "Triggers_SZ"
        },
        {
          "TableName": "RI_Parent_TablesV"
        },
        {
          "TableName": "ObjectListEntry"
        },
        {
          "TableName": "ColumnUseCountV_SZ"
        },
        {
          "TableName": "ResSpdskView"
        },
        {
          "TableName": "QryLogV"
        },
        {
          "TableName": "BAR_Databases2V"
        },
        {
          "TableName": "TxnTable"
        },
        {
          "TableName": "Table_LevelConstraintsVX"
        },
        {
          "TableName": "userdb_SZ"
        },
        {
          "TableName": "DBSDataRelatedErrors"
        },
        {
          "TableName": "JoinIndexColumns"
        },
        {
          "TableName": "DBQLRuleCountTbl"
        },
        {
          "TableName": "SpaceLogTbl"
        },
        {
          "TableName": "NetSecPolicyLogTbl"
        },
        {
          "TableName": "AccLogTbl"
        },
        {
          "TableName": "Maps"
        },
        {
          "TableName": "Dbase_TD16"
        },
        {
          "TableName": "UserGrantedRights"
        },
        {
          "TableName": "Roles"
        },
        {
          "TableName": "ColumnStatsV_SZ"
        },
        {
          "TableName": "InDoubtLog"
        },
        {
          "TableName": "User_Default_Journals_SZ"
        },
        {
          "TableName": "ChildrenX"
        },
        {
          "TableName": "TableStatistics"
        },
        {
          "TableName": "CSPSESSIONINFOV"
        },
        {
          "TableName": "Profiles_TD16"
        },
        {
          "TableName": "ResUsageScpu"
        },
        {
          "TableName": "FunctionsV"
        },
        {
          "TableName": "ForeignTablesVX"
        },
        {
          "TableName": "DeleteOldInDoubt"
        },
        {
          "TableName": "AccountInfo"
        },
        {
          "TableName": "Profiles_TD15"
        },
        {
          "TableName": "ExternalSPsV"
        },
        {
          "TableName": "Hosts"
        },
        {
          "TableName": "PartitioningConstraintsV_SZ"
        },
        {
          "TableName": "Indices"
        },
        {
          "TableName": "TriggersTbl"
        },
        {
          "TableName": "ConnectRulesV_SZ"
        },
        {
          "TableName": "QryLogEventHisV"
        },
        {
          "TableName": "UDTCast"
        },
        {
          "TableName": "BAREventsTbl"
        },
        {
          "TableName": "ForeignTablesInfoVX"
        },
        {
          "TableName": "savings_tran"
        },
        {
          "TableName": "opt_cost_table"
        },
        {
          "TableName": "LocalTransactionStatusTable"
        },
        {
          "TableName": "pima_patient_diagnoses"
        },
        {
          "TableName": "RI_Child_TablesX"
        },
        {
          "TableName": "ReconfigJournalTbl"
        },
        {
          "TableName": "View_XRoleDBs2"
        },
        {
          "TableName": "credit_acct"
        },
        {
          "TableName": "RepCaptureRulesTbl"
        },
        {
          "TableName": "RoleInfoV_SZ"
        },
        {
          "TableName": "RequestTbl"
        },
        {
          "TableName": "AuthorizationsV"
        },
        {
          "TableName": "RoleMembersV_SZ"
        },
        {
          "TableName": "QryLogExtAmpDataV"
        },
        {
          "TableName": "TblSrvVX"
        },
        {
          "TableName": "DataBaseSpace_TD16"
        },
        {
          "TableName": "StopMoveQueueTbl"
        },
        {
          "TableName": "Table_LevelConstraintsV"
        },
        {
          "TableName": "SavedTransactionStatusTable"
        },
        {
          "TableName": "EventsX"
        },
        {
          "TableName": "Journals_SZ"
        },
        {
          "TableName": "ResUsageSpma"
        },
        {
          "TableName": "ObjectUseCountV_SZ"
        },
        {
          "TableName": "ResUsageSvpr"
        },
        {
          "TableName": "QryLogExtPeDataV"
        },
        {
          "TableName": "CDSTableSizeV_SZ"
        },
        {
          "TableName": "ResSldvView"
        },
        {
          "TableName": "PeriodsV_SZ"
        },
        {
          "TableName": "WlcExceptions"
        },
        {
          "TableName": "ResShstView"
        },
        {
          "TableName": "QryLogTdwmSumV"
        },
        {
          "TableName": "TriggersVX"
        },
        {
          "TableName": "RCC_MediaVX"
        },
        {
          "TableName": "Tables2VX"
        },
        {
          "TableName": "Maps"
        },
        {
          "TableName": "ConnectRulesV"
        },
        {
          "TableName": "DBQLSqlTbl"
        },
        {
          "TableName": "View_XUserOnlyPublicTVMs"
        },
        {
          "TableName": "AccLogRules"
        },
        {
          "TableName": "View_XUserRoleDBs"
        },
        {
          "TableName": "SecurityLogV"
        },
        {
          "TableName": "IndexConstraintsX"
        },
        {
          "TableName": "GT_Ranked_Tables_Max"
        },
        {
          "TableName": "LogOnOff_SZ"
        },
        {
          "TableName": "SHOWTBLCHECKSV"
        },
        {
          "TableName": "ReconfigTableStatsTbl"
        },
        {
          "TableName": "UserRemarks"
        },
        {
          "TableName": "TblSrvInfoV"
        },
        {
          "TableName": "SessionInfoX"
        },
        {
          "TableName": "ColumnsV_SZ"
        },
        {
          "TableName": "RCC_ConfigurationVX"
        },
        {
          "TableName": "DeleteAccessLogV"
        },
        {
          "TableName": "ResUsageIpma"
        },
        {
          "TableName": "ExpStatsV"
        },
        {
          "TableName": "DBQLObjTbl"
        },
        {
          "TableName": "SysCons"
        },
        {
          "TableName": "Table_LevelConstraints_SZ"
        },
        {
          "TableName": "StateDefs"
        },
        {
          "TableName": "SecurityLogX"
        },
        {
          "TableName": "ObjectListEntry"
        },
        {
          "TableName": "MapsV"
        },
        {
          "TableName": "DBQLUtilityTbl_TD15"
        },
        {
          "TableName": "Columns"
        },
        {
          "TableName": "AnalyzeJobMonitoringEvents"
        },
        {
          "TableName": "Tables3VX"
        },
        {
          "TableName": "User_Default_Journals"
        },
        {
          "TableName": "TD_PushProfileInfoV"
        },
        {
          "TableName": "MapsVX"
        },
        {
          "TableName": "LogOnOffX"
        },
        {
          "TableName": "TableSize_SZ"
        },
        {
          "TableName": "LogonRules"
        },
        {
          "TableName": "MapGrants"
        },
        {
          "TableName": "StatsV_SZ"
        },
        {
          "TableName": "checking_tran"
        },
        {
          "TableName": "IndexConstraints_SZ"
        },
        {
          "TableName": "Opt_DBSCtl_Table"
        },
        {
          "TableName": "Indices_SZ"
        },
        {
          "TableName": "QryLockLogXMLV"
        },
        {
          "TableName": "QryLogAmpDataV"
        },
        {
          "TableName": "AccessLog"
        },
        {
          "TableName": "ExpStatsVX"
        },
        {
          "TableName": "Indexes_TD16"
        },
        {
          "TableName": "ServerVX"
        },
        {
          "TableName": "Dependency"
        },
        {
          "TableName": "LoadTablesInfoTbl"
        },
        {
          "TableName": "LogOnOff"
        },
        {
          "TableName": "TableSizeV"
        },
        {
          "TableName": "CSPSESSIONINFO"
        },
        {
          "TableName": "TableText_SZ"
        },
        {
          "TableName": "GT_join_inputs"
        },
        {
          "TableName": "Opt_Map_Table"
        },
        {
          "TableName": "DEMO_Customer360_Cookie"
        },
        {
          "TableName": "opt_ras_table"
        },
        {
          "TableName": "Field"
        },
        {
          "TableName": "ExclusionListEntry"
        },
        {
          "TableName": "ExclusionListsV"
        },
        {
          "TableName": "SessionInfoVX"
        },
        {
          "TableName": "ColumnStatsVX"
        },
        {
          "TableName": "MultiColumnStatsV_SZ"
        },
        {
          "TableName": "View_XRoleDBs"
        },
        {
          "TableName": "TVFields_TD16"
        },
        {
          "TableName": "ConstraintNames"
        },
        {
          "TableName": "SessionInfoV"
        },
        {
          "TableName": "TblSrvV"
        },
        {
          "TableName": "ActionsTbl"
        },
        {
          "TableName": "MapGrantsV_SZ"
        },
        {
          "TableName": "View_XUserOnlyTVMs"
        },
        {
          "TableName": "AllSpaceV"
        },
        {
          "TableName": "RCConfiguration"
        },
        {
          "TableName": "SHOWCOLCHECKSVX"
        },
        {
          "TableName": "RI_Distinct_ParentsV_SZ"
        },
        {
          "TableName": "MultiExpStatsV_SZ"
        },
        {
          "TableName": "User_Database"
        },
        {
          "TableName": "View_XUserRolePublicTVM"
        },
        {
          "TableName": "Redrive"
        },
        {
          "TableName": "QryLogEventsV"
        },
        {
          "TableName": "PostScriptWorkTbl"
        },
        {
          "TableName": "UserdbV_SZ"
        },
        {
          "TableName": "ChildrenV_SZ"
        },
        {
          "TableName": "RI_Parent_TablesV_SZ"
        },
        {
          "TableName": "ActualTableSizeV_SZ"
        },
        {
          "TableName": "InsertUseCountVX"
        },
        {
          "TableName": "aoa_statistics_metadata"
        },
        {
          "TableName": "TWMS_Binomial"
        },
        {
          "TableName": "ResSvprView"
        },
        {
          "TableName": "DBQLXMLTbl"
        },
        {
          "TableName": "ChildrenVX"
        },
        {
          "TableName": "QueryBandTbl"
        },
        {
          "TableName": "SHOWTBLCHECKSVX"
        },
        {
          "TableName": "LogTbl"
        },
        {
          "TableName": "DBQLUtilityTbl_TD16"
        },
        {
          "TableName": "EventsVX"
        },
        {
          "TableName": "Exceptions"
        },
        {
          "TableName": "ParentChildCorrelation"
        },
        {
          "TableName": "TableSizeX"
        },
        {
          "TableName": "DBQLExplainTbl"
        },
        {
          "TableName": "ServerV"
        },
        {
          "TableName": "LogOnOffV_SZ"
        },
        {
          "TableName": "LogonRulesV_SZ"
        },
        {
          "TableName": "AllSpaceX"
        },
        {
          "TableName": "Opt_MapRel_Table"
        },
        {
          "TableName": "REMOTEQualifiedTable"
        },
        {
          "TableName": "ResIvprView"
        },
        {
          "TableName": "UDTTransform_TD15"
        },
        {
          "TableName": "Database_Default_Journals"
        },
        {
          "TableName": "Software_Event_Log"
        },
        {
          "TableName": "QryLogExceptionsV"
        },
        {
          "TableName": "DataBaseSpace"
        },
        {
          "TableName": "TWMS_F"
        },
        {
          "TableName": "Acctg"
        },
        {
          "TableName": "RanksTbl"
        },
        {
          "TableName": "AuthorizationsX"
        },
        {
          "TableName": "ReconfigInfoV"
        },
        {
          "TableName": "RoleGrants"
        },
        {
          "TableName": "DeleteAccessLog_SZ"
        },
        {
          "TableName": "FastLogRestartV"
        },
        {
          "TableName": "EventLog"
        },
        {
          "TableName": "CreateQCFVer"
        },
        {
          "TableName": "ViewTable"
        },
        {
          "TableName": "DiskSpace_SZ"
        },
        {
          "TableName": "FunctionsX"
        },
        {
          "TableName": "PartitionRecommendations"
        },
        {
          "TableName": "DiskSpaceErrorV"
        },
        {
          "TableName": "JAR_JAR_USAGE"
        },
        {
          "TableName": "ReconfigInfoTbl_TD15"
        },
        {
          "TableName": "AccountInfoX"
        },
        {
          "TableName": "ServerInfo_TD15"
        },
        {
          "TableName": "DiskGlobalSpaceErrorV"
        },
        {
          "TableName": "AMPUsage"
        },
        {
          "TableName": "ReconfigDeleteOrderV"
        },
        {
          "TableName": "Journals"
        },
        {
          "TableName": "ServerTblOpInfo"
        },
        {
          "TableName": "SparseMapAmpsV"
        },
        {
          "TableName": "View_XUserTVMs"
        },
        {
          "TableName": "TeradataTmp"
        },
        {
          "TableName": "ARTColumns"
        },
        {
          "TableName": "ARTTables"
        },
        {
          "TableName": "PasswordRestrictions"
        },
        {
          "TableName": "CollationsV"
        },
        {
          "TableName": "Tables2_SZ"
        },
        {
          "TableName": "UnResolvedReferences"
        },
        {
          "TableName": "UsersV"
        },
        {
          "TableName": "ActionsVX"
        },
        {
          "TableName": "TVM_TD16"
        },
        {
          "TableName": "ChangedRowJournal"
        },
        {
          "TableName": "ReferencedTbls"
        },
        {
          "TableName": "dem"
        },
        {
          "TableName": "CollationTbl"
        },
        {
          "TableName": "Tables_SZ"
        },
        {
          "TableName": "DBQLSQLFeed"
        },
        {
          "TableName": "RI_Child_TablesV_SZ"
        },
        {
          "TableName": "RI_Distinct_ChildrenV_SZ"
        },
        {
          "TableName": "ReconfigTableStatsV"
        },
        {
          "TableName": "JournalsV_SZ"
        },
        {
          "TableName": "AllSpaceVX"
        },
        {
          "TableName": "savings_acct"
        },
        {
          "TableName": "ConstantValues"
        },
        {
          "TableName": "DSAConnectionsTbl"
        },
        {
          "TableName": "SecurityLogVX"
        },
        {
          "TableName": "View_XUserRoleTVMs"
        },
        {
          "TableName": "AllGlobalSpaceV_SZ"
        },
        {
          "TableName": "ColumnStatsV"
        },
        {
          "TableName": "TSETQueryText"
        },
        {
          "TableName": "ResIpmaView"
        },
        {
          "TableName": "DiskSpaceX"
        },
        {
          "TableName": "TDWMEventLog_TD15"
        },
        {
          "TableName": "FastLogV"
        },
        {
          "TableName": "MapsV_SZ"
        },
        {
          "TableName": "OwnerdbV_SZ"
        },
        {
          "TableName": "QRYLOGFEATUREUSECOUNTV"
        },
        {
          "TableName": "ResScpuView"
        },
        {
          "TableName": "TWMS_KruskalWallis"
        },
        {
          "TableName": "CompatibleBCal"
        },
        {
          "TableName": "RI_Parent_TablesVX"
        },
        {
          "TableName": "StatesMatrix"
        },
        {
          "TableName": "RI_Distinct_ParentsVX"
        },
        {
          "TableName": "Databases2X"
        },
        {
          "TableName": "TableStatsVX"
        },
        {
          "TableName": "CreateQCF"
        },
        {
          "TableName": "DBQLRules_SZ"
        },
        {
          "TableName": "GDOMLog"
        },
        {
          "TableName": "AssociationX"
        },
        {
          "TableName": "Events"
        },
        {
          "TableName": "ConnectRules"
        },
        {
          "TableName": "Accounts"
        },
        {
          "TableName": "DeleteUseCountVX"
        },
        {
          "TableName": "ReferencingTbls"
        },
        {
          "TableName": "PsfGlobalOpenvValues"
        },
        {
          "TableName": "DiskSpaceV"
        },
        {
          "TableName": "LoadTablesInfoV_SZ"
        },
        {
          "TableName": "MonitorRequest"
        },
        {
          "TableName": "Dbase_TD15"
        },
        {
          "TableName": "CALBASICS"
        },
        {
          "TableName": "Database_Default_Journals_SZ"
        },
        {
          "TableName": "Tables"
        },
        {
          "TableName": "QryLogUtilityV"
        },
        {
          "TableName": "AccessRights"
        },
        {
          "TableName": "ShowTblChecks_SZ"
        },
        {
          "TableName": "TDWMSummaryLog"
        },
        {
          "TableName": "Databases"
        },
        {
          "TableName": "CharSetsV"
        },
        {
          "TableName": "Next_TD15"
        },
        {
          "TableName": "TDWMLock"
        },
        {
          "TableName": "ResolvedDTS"
        },
        {
          "TableName": "ResolvedDTSV_SZ"
        },
        {
          "TableName": "BAR_TablesV_SZ"
        },
        {
          "TableName": "QryLogClientAttrV"
        },
        {
          "TableName": "IndexMaintenance"
        },
        {
          "TableName": "ActionHistoryTbl"
        },
        {
          "TableName": "UpdateUseCountVX"
        },
        {
          "TableName": "GlobalDBSpaceV_SZ"
        },
        {
          "TableName": "TableSizeVX"
        },
        {
          "TableName": "ErrorMsgs"
        },
        {
          "TableName": "TableStatsV"
        },
        {
          "TableName": "Zones"
        },
        {
          "TableName": "IndicesX"
        }
      ]
    }
  ]
}


--- INSTRUCTIONS ---
1.  **Analyze the State**: Review the "CURRENT PHASE GOAL" and the "WORKFLOW STATE & HISTORY" to understand what has been done and what is needed next.
2.  **CRITICAL RULE (Tool Selection & Arguments)**: You **MUST** select your next action from the list of "Permitted Tools for this Phase". You are not allowed to use any other tool. Furthermore, you **MUST** use the exact argument names as they are defined in the tool details above. You **MUST NOT** invent, hallucinate, or use any arguments that are not explicitly listed in the definitions.
3.  **Self-Correction**: If a "Previous Attempt" is noted in the "CONSTRAINTS" section, it means your last choice was invalid. You **MUST** analyze the error and choose a different, valid tool from the permitted list. Do not repeat the invalid choice.
4.  **CoreLLMTask Usage**:
    -   For any task that involves synthesis, analysis, description, or summarization, you **MUST** use the `CoreLLMTask` tool, but only if it is in the permitted tools list.
    -   When calling `CoreLLMTask`, you **MUST** provide the `task_description` argument.
    -   Crucially, you **MUST** also determine which previous phase results are necessary for the task. You **MUST** provide these as a list of strings in the `source_data` argument.
    -   **CONTEXT PRESERVATION RULE**: If the current phase involves creating a final summary or report for the user, you **MUST** ensure you have all the necessary context. Your `source_data` list **MUST** include the results from **ALL** previous data-gathering phases (e.g., `["result_of_phase_1", "result_of_phase_2"]`) to prevent information loss.
5.  **Handle Loops**: If you are in a looping phase (indicated by the presence of a "LOOP CONTEXT" section), you **MUST** focus your action on the single item provided in `current_loop_item`. You **MUST** use the information within that item to formulate the arguments for your tool call.
6.  **Format Response**: Your response MUST be a single JSON object for a tool call.

Your response MUST be a single, valid JSON object for a tool call. Do NOT add any extra text or conversation.


USER PROMPT:
Determine the next action based on the instructions and state provided in the system prompt.

2025-08-24 18:08:56,145 - --- RESPONSE ---
Based on the provided information, the table 'DEMO_Customer360_Equipment' exists.

```json
{"prompt_name": "base_tableBusinessDesc", "arguments": {"database_name": "DEMO_Customer360_db", "table_name": "DEMO_Customer360_Equipment"}}
```
--------------------------------------------------

